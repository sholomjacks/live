{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\");\n/**\n * Convenient class to convert the process of scaning keys to a readable stream.\n *\n * @export\n * @class ScanStream\n * @extends {Readable}\n */\n\n\nclass ScanStream extends stream_1.Readable {\n  constructor(opt) {\n    super(opt);\n    this.opt = opt;\n    this._redisCursor = \"0\";\n    this._redisDrained = false;\n  }\n\n  _read() {\n    if (this._redisDrained) {\n      this.push(null);\n      return;\n    }\n\n    const args = [this._redisCursor];\n\n    if (this.opt.key) {\n      args.unshift(this.opt.key);\n    }\n\n    if (this.opt.match) {\n      args.push(\"MATCH\", this.opt.match);\n    }\n\n    if (this.opt.count) {\n      args.push(\"COUNT\", String(this.opt.count));\n    }\n\n    this.opt.redis[this.opt.command](args, (err, res) => {\n      if (err) {\n        this.emit(\"error\", err);\n        return;\n      }\n\n      this._redisCursor = res[0] instanceof Buffer ? res[0].toString() : res[0];\n\n      if (this._redisCursor === \"0\") {\n        this._redisDrained = true;\n      }\n\n      this.push(res[1]);\n    });\n  }\n\n  close() {\n    this._redisDrained = true;\n  }\n\n}\n\nexports.default = ScanStream;","map":{"version":3,"sources":["C:/Users/gamem/codecademy/node_modules/ioredis/built/ScanStream.js"],"names":["Object","defineProperty","exports","value","stream_1","require","ScanStream","Readable","constructor","opt","_redisCursor","_redisDrained","_read","push","args","key","unshift","match","count","String","redis","command","err","res","emit","Buffer","toString","close","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;AACA;;;;;;;;;AAOA,MAAMC,UAAN,SAAyBF,QAAQ,CAACG,QAAlC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,UAAMA,GAAN;AACA,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,YAAL,GAAoB,GAApB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACH;;AACDC,EAAAA,KAAK,GAAG;AACJ,QAAI,KAAKD,aAAT,EAAwB;AACpB,WAAKE,IAAL,CAAU,IAAV;AACA;AACH;;AACD,UAAMC,IAAI,GAAG,CAAC,KAAKJ,YAAN,CAAb;;AACA,QAAI,KAAKD,GAAL,CAASM,GAAb,EAAkB;AACdD,MAAAA,IAAI,CAACE,OAAL,CAAa,KAAKP,GAAL,CAASM,GAAtB;AACH;;AACD,QAAI,KAAKN,GAAL,CAASQ,KAAb,EAAoB;AAChBH,MAAAA,IAAI,CAACD,IAAL,CAAU,OAAV,EAAmB,KAAKJ,GAAL,CAASQ,KAA5B;AACH;;AACD,QAAI,KAAKR,GAAL,CAASS,KAAb,EAAoB;AAChBJ,MAAAA,IAAI,CAACD,IAAL,CAAU,OAAV,EAAmBM,MAAM,CAAC,KAAKV,GAAL,CAASS,KAAV,CAAzB;AACH;;AACD,SAAKT,GAAL,CAASW,KAAT,CAAe,KAAKX,GAAL,CAASY,OAAxB,EAAiCP,IAAjC,EAAuC,CAACQ,GAAD,EAAMC,GAAN,KAAc;AACjD,UAAID,GAAJ,EAAS;AACL,aAAKE,IAAL,CAAU,OAAV,EAAmBF,GAAnB;AACA;AACH;;AACD,WAAKZ,YAAL,GAAoBa,GAAG,CAAC,CAAD,CAAH,YAAkBE,MAAlB,GAA2BF,GAAG,CAAC,CAAD,CAAH,CAAOG,QAAP,EAA3B,GAA+CH,GAAG,CAAC,CAAD,CAAtE;;AACA,UAAI,KAAKb,YAAL,KAAsB,GAA1B,EAA+B;AAC3B,aAAKC,aAAL,GAAqB,IAArB;AACH;;AACD,WAAKE,IAAL,CAAUU,GAAG,CAAC,CAAD,CAAb;AACH,KAVD;AAWH;;AACDI,EAAAA,KAAK,GAAG;AACJ,SAAKhB,aAAL,GAAqB,IAArB;AACH;;AApCsC;;AAsC3CT,OAAO,CAAC0B,OAAR,GAAkBtB,UAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\n/**\n * Convenient class to convert the process of scaning keys to a readable stream.\n *\n * @export\n * @class ScanStream\n * @extends {Readable}\n */\nclass ScanStream extends stream_1.Readable {\n    constructor(opt) {\n        super(opt);\n        this.opt = opt;\n        this._redisCursor = \"0\";\n        this._redisDrained = false;\n    }\n    _read() {\n        if (this._redisDrained) {\n            this.push(null);\n            return;\n        }\n        const args = [this._redisCursor];\n        if (this.opt.key) {\n            args.unshift(this.opt.key);\n        }\n        if (this.opt.match) {\n            args.push(\"MATCH\", this.opt.match);\n        }\n        if (this.opt.count) {\n            args.push(\"COUNT\", String(this.opt.count));\n        }\n        this.opt.redis[this.opt.command](args, (err, res) => {\n            if (err) {\n                this.emit(\"error\", err);\n                return;\n            }\n            this._redisCursor = res[0] instanceof Buffer ? res[0].toString() : res[0];\n            if (this._redisCursor === \"0\") {\n                this._redisDrained = true;\n            }\n            this.push(res[1]);\n        });\n    }\n    close() {\n        this._redisDrained = true;\n    }\n}\nexports.default = ScanStream;\n"]},"metadata":{},"sourceType":"script"}