{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst crypto_1 = require(\"crypto\");\n\nconst promiseContainer_1 = require(\"./promiseContainer\");\n\nconst command_1 = require(\"./command\");\n\nconst standard_as_callback_1 = require(\"standard-as-callback\");\n\nclass Script {\n  constructor(lua, numberOfKeys = null, keyPrefix = \"\", readOnly = false) {\n    this.lua = lua;\n    this.numberOfKeys = numberOfKeys;\n    this.keyPrefix = keyPrefix;\n    this.readOnly = readOnly;\n    this.sha = crypto_1.createHash(\"sha1\").update(lua).digest(\"hex\");\n  }\n\n  execute(container, args, options, callback) {\n    if (typeof this.numberOfKeys === \"number\") {\n      args.unshift(this.numberOfKeys);\n    }\n\n    if (this.keyPrefix) {\n      options.keyPrefix = this.keyPrefix;\n    }\n\n    if (this.readOnly) {\n      options.readOnly = true;\n    }\n\n    const evalsha = new command_1.default(\"evalsha\", [this.sha].concat(args), options);\n    evalsha.isCustomCommand = true;\n    const result = container.sendCommand(evalsha);\n\n    if (promiseContainer_1.isPromise(result)) {\n      return standard_as_callback_1.default(result.catch(err => {\n        if (err.toString().indexOf(\"NOSCRIPT\") === -1) {\n          throw err;\n        }\n\n        return container.sendCommand(new command_1.default(\"eval\", [this.lua].concat(args), options));\n      }), callback);\n    } // result is not a Promise--probably returned from a pipeline chain; however,\n    // we still need the callback to fire when the script is evaluated\n\n\n    standard_as_callback_1.default(evalsha.promise, callback);\n    return result;\n  }\n\n}\n\nexports.default = Script;","map":{"version":3,"sources":["C:/Users/gamem/codecademy/node_modules/ioredis/built/script.js"],"names":["Object","defineProperty","exports","value","crypto_1","require","promiseContainer_1","command_1","standard_as_callback_1","Script","constructor","lua","numberOfKeys","keyPrefix","readOnly","sha","createHash","update","digest","execute","container","args","options","callback","unshift","evalsha","default","concat","isCustomCommand","result","sendCommand","isPromise","catch","err","toString","indexOf","promise"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,sBAAsB,GAAGH,OAAO,CAAC,sBAAD,CAAtC;;AACA,MAAMI,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,GAAD,EAAMC,YAAY,GAAG,IAArB,EAA2BC,SAAS,GAAG,EAAvC,EAA2CC,QAAQ,GAAG,KAAtD,EAA6D;AACpE,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,GAAL,GAAWX,QAAQ,CAACY,UAAT,CAAoB,MAApB,EACNC,MADM,CACCN,GADD,EAENO,MAFM,CAEC,KAFD,CAAX;AAGH;;AACDC,EAAAA,OAAO,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,QAA3B,EAAqC;AACxC,QAAI,OAAO,KAAKX,YAAZ,KAA6B,QAAjC,EAA2C;AACvCS,MAAAA,IAAI,CAACG,OAAL,CAAa,KAAKZ,YAAlB;AACH;;AACD,QAAI,KAAKC,SAAT,EAAoB;AAChBS,MAAAA,OAAO,CAACT,SAAR,GAAoB,KAAKA,SAAzB;AACH;;AACD,QAAI,KAAKC,QAAT,EAAmB;AACfQ,MAAAA,OAAO,CAACR,QAAR,GAAmB,IAAnB;AACH;;AACD,UAAMW,OAAO,GAAG,IAAIlB,SAAS,CAACmB,OAAd,CAAsB,SAAtB,EAAiC,CAAC,KAAKX,GAAN,EAAWY,MAAX,CAAkBN,IAAlB,CAAjC,EAA0DC,OAA1D,CAAhB;AACAG,IAAAA,OAAO,CAACG,eAAR,GAA0B,IAA1B;AACA,UAAMC,MAAM,GAAGT,SAAS,CAACU,WAAV,CAAsBL,OAAtB,CAAf;;AACA,QAAInB,kBAAkB,CAACyB,SAAnB,CAA6BF,MAA7B,CAAJ,EAA0C;AACtC,aAAOrB,sBAAsB,CAACkB,OAAvB,CAA+BG,MAAM,CAACG,KAAP,CAAaC,GAAG,IAAI;AACtD,YAAIA,GAAG,CAACC,QAAJ,GAAeC,OAAf,CAAuB,UAAvB,MAAuC,CAAC,CAA5C,EAA+C;AAC3C,gBAAMF,GAAN;AACH;;AACD,eAAOb,SAAS,CAACU,WAAV,CAAsB,IAAIvB,SAAS,CAACmB,OAAd,CAAsB,MAAtB,EAA8B,CAAC,KAAKf,GAAN,EAAWgB,MAAX,CAAkBN,IAAlB,CAA9B,EAAuDC,OAAvD,CAAtB,CAAP;AACH,OALqC,CAA/B,EAKHC,QALG,CAAP;AAMH,KApBuC,CAqBxC;AACA;;;AACAf,IAAAA,sBAAsB,CAACkB,OAAvB,CAA+BD,OAAO,CAACW,OAAvC,EAAgDb,QAAhD;AACA,WAAOM,MAAP;AACH;;AAnCQ;;AAqCb3B,OAAO,CAACwB,OAAR,GAAkBjB,MAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nconst promiseContainer_1 = require(\"./promiseContainer\");\nconst command_1 = require(\"./command\");\nconst standard_as_callback_1 = require(\"standard-as-callback\");\nclass Script {\n    constructor(lua, numberOfKeys = null, keyPrefix = \"\", readOnly = false) {\n        this.lua = lua;\n        this.numberOfKeys = numberOfKeys;\n        this.keyPrefix = keyPrefix;\n        this.readOnly = readOnly;\n        this.sha = crypto_1.createHash(\"sha1\")\n            .update(lua)\n            .digest(\"hex\");\n    }\n    execute(container, args, options, callback) {\n        if (typeof this.numberOfKeys === \"number\") {\n            args.unshift(this.numberOfKeys);\n        }\n        if (this.keyPrefix) {\n            options.keyPrefix = this.keyPrefix;\n        }\n        if (this.readOnly) {\n            options.readOnly = true;\n        }\n        const evalsha = new command_1.default(\"evalsha\", [this.sha].concat(args), options);\n        evalsha.isCustomCommand = true;\n        const result = container.sendCommand(evalsha);\n        if (promiseContainer_1.isPromise(result)) {\n            return standard_as_callback_1.default(result.catch(err => {\n                if (err.toString().indexOf(\"NOSCRIPT\") === -1) {\n                    throw err;\n                }\n                return container.sendCommand(new command_1.default(\"eval\", [this.lua].concat(args), options));\n            }), callback);\n        }\n        // result is not a Promise--probably returned from a pipeline chain; however,\n        // we still need the callback to fire when the script is evaluated\n        standard_as_callback_1.default(evalsha.promise, callback);\n        return result;\n    }\n}\nexports.default = Script;\n"]},"metadata":{},"sourceType":"script"}