{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"./command\");\n\nconst util_1 = require(\"util\");\n\nconst standard_as_callback_1 = require(\"standard-as-callback\");\n\nconst redis_commands_1 = require(\"redis-commands\");\n\nconst cluster_key_slot_1 = require(\"cluster-key-slot\");\n\nconst PromiseContainer = require(\"./promiseContainer\");\n\nconst commander_1 = require(\"./commander\");\n\nfunction Pipeline(redis) {\n  commander_1.default.call(this);\n  this.redis = redis;\n  this.isCluster = this.redis.constructor.name === \"Cluster\";\n  this.options = redis.options;\n  this._queue = [];\n  this._result = [];\n  this._transactions = 0;\n  this._shaToScript = {};\n  Object.keys(redis.scriptsSet).forEach(name => {\n    const script = redis.scriptsSet[name];\n    this._shaToScript[script.sha] = script;\n    this[name] = redis[name];\n    this[name + \"Buffer\"] = redis[name + \"Buffer\"];\n  });\n  const Promise = PromiseContainer.get();\n  this.promise = new Promise((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  const _this = this;\n\n  Object.defineProperty(this, \"length\", {\n    get: function () {\n      return _this._queue.length;\n    }\n  });\n}\n\nexports.default = Pipeline;\nObject.assign(Pipeline.prototype, commander_1.default.prototype);\n\nPipeline.prototype.fillResult = function (value, position) {\n  if (this._queue[position].name === \"exec\" && Array.isArray(value[1])) {\n    var execLength = value[1].length;\n\n    for (let i = 0; i < execLength; i++) {\n      if (value[1][i] instanceof Error) {\n        continue;\n      }\n\n      const cmd = this._queue[position - (execLength - i)];\n\n      try {\n        value[1][i] = cmd.transformReply(value[1][i]);\n      } catch (err) {\n        value[1][i] = err;\n      }\n    }\n  }\n\n  this._result[position] = value;\n\n  if (--this.replyPending) {\n    return;\n  }\n\n  if (this.isCluster) {\n    let retriable = true;\n    let commonError;\n    let inTransaction;\n\n    for (let i = 0; i < this._result.length; ++i) {\n      var error = this._result[i][0];\n      var command = this._queue[i];\n\n      if (command.name === \"multi\") {\n        inTransaction = true;\n      } else if (command.name === \"exec\") {\n        inTransaction = false;\n      }\n\n      if (error) {\n        if (command.name === \"exec\" && error.message === \"EXECABORT Transaction discarded because of previous errors.\") {\n          continue;\n        }\n\n        if (!commonError) {\n          commonError = {\n            name: error.name,\n            message: error.message\n          };\n        } else if (commonError.name !== error.name || commonError.message !== error.message) {\n          retriable = false;\n          break;\n        }\n      } else if (!inTransaction) {\n        var isReadOnly = redis_commands_1.exists(command.name) && redis_commands_1.hasFlag(command.name, \"readonly\");\n\n        if (!isReadOnly) {\n          retriable = false;\n          break;\n        }\n      }\n    }\n\n    if (commonError && retriable) {\n      var _this = this;\n\n      var errv = commonError.message.split(\" \");\n      var queue = this._queue;\n      inTransaction = false;\n      this._queue = [];\n\n      for (let i = 0; i < queue.length; ++i) {\n        if (errv[0] === \"ASK\" && !inTransaction && queue[i].name !== \"asking\" && (!queue[i - 1] || queue[i - 1].name !== \"asking\")) {\n          var asking = new command_1.default(\"asking\");\n          asking.ignore = true;\n          this.sendCommand(asking);\n        }\n\n        queue[i].initPromise();\n        this.sendCommand(queue[i]);\n\n        if (queue[i].name === \"multi\") {\n          inTransaction = true;\n        } else if (queue[i].name === \"exec\") {\n          inTransaction = false;\n        }\n      }\n\n      let matched = true;\n\n      if (typeof this.leftRedirections === \"undefined\") {\n        this.leftRedirections = {};\n      }\n\n      const exec = function () {\n        _this.exec();\n      };\n\n      this.redis.handleError(commonError, this.leftRedirections, {\n        moved: function (slot, key) {\n          _this.preferKey = key;\n          _this.redis.slots[errv[1]] = [key];\n\n          _this.redis.refreshSlotsCache();\n\n          _this.exec();\n        },\n        ask: function (slot, key) {\n          _this.preferKey = key;\n\n          _this.exec();\n        },\n        tryagain: exec,\n        clusterDown: exec,\n        connectionClosed: exec,\n        maxRedirections: () => {\n          matched = false;\n        },\n        defaults: () => {\n          matched = false;\n        }\n      });\n\n      if (matched) {\n        return;\n      }\n    }\n  }\n\n  let ignoredCount = 0;\n\n  for (let i = 0; i < this._queue.length - ignoredCount; ++i) {\n    if (this._queue[i + ignoredCount].ignore) {\n      ignoredCount += 1;\n    }\n\n    this._result[i] = this._result[i + ignoredCount];\n  }\n\n  this.resolve(this._result.slice(0, this._result.length - ignoredCount));\n};\n\nPipeline.prototype.sendCommand = function (command) {\n  const position = this._queue.length;\n  command.promise.then(result => {\n    this.fillResult([null, result], position);\n  }).catch(error => {\n    this.fillResult([error], position);\n  });\n\n  this._queue.push(command);\n\n  return this;\n};\n\nPipeline.prototype.addBatch = function (commands) {\n  let command, commandName, args;\n\n  for (let i = 0; i < commands.length; ++i) {\n    command = commands[i];\n    commandName = command[0];\n    args = command.slice(1);\n    this[commandName].apply(this, args);\n  }\n\n  return this;\n};\n\nconst multi = Pipeline.prototype.multi;\n\nPipeline.prototype.multi = function () {\n  this._transactions += 1;\n  return multi.apply(this, arguments);\n};\n\nconst execBuffer = Pipeline.prototype.execBuffer;\nconst exec = Pipeline.prototype.exec;\nPipeline.prototype.execBuffer = util_1.deprecate(function () {\n  if (this._transactions > 0) {\n    this._transactions -= 1;\n  }\n\n  return execBuffer.apply(this, arguments);\n}, \"Pipeline#execBuffer: Use Pipeline#exec instead\");\n\nPipeline.prototype.exec = function (callback) {\n  if (this._transactions > 0) {\n    this._transactions -= 1;\n    return (this.options.dropBufferSupport ? exec : execBuffer).apply(this, arguments);\n  }\n\n  if (!this.nodeifiedPromise) {\n    this.nodeifiedPromise = true;\n    standard_as_callback_1.default(this.promise, callback);\n  }\n\n  if (!this._queue.length) {\n    this.resolve([]);\n  }\n\n  let pipelineSlot;\n\n  if (this.isCluster) {\n    // List of the first key for each command\n    const sampleKeys = [];\n\n    for (let i = 0; i < this._queue.length; i++) {\n      var keys = this._queue[i].getKeys();\n\n      if (keys.length) {\n        sampleKeys.push(keys[0]);\n      }\n    }\n\n    if (sampleKeys.length) {\n      pipelineSlot = cluster_key_slot_1.generateMulti(sampleKeys);\n\n      if (pipelineSlot < 0) {\n        this.reject(new Error(\"All keys in the pipeline should belong to the same slot\"));\n        return this.promise;\n      }\n    } else {\n      // Send the pipeline to a random node\n      pipelineSlot = Math.random() * 16384 | 0;\n    }\n  } // Check whether scripts exists\n\n\n  const scripts = [];\n\n  for (let i = 0; i < this._queue.length; ++i) {\n    var item = this._queue[i];\n\n    if (this.isCluster && item.isCustomCommand) {\n      this.reject(new Error(\"Sending custom commands in pipeline is not supported in Cluster mode.\"));\n      return this.promise;\n    }\n\n    if (item.name !== \"evalsha\") {\n      continue;\n    }\n\n    const script = this._shaToScript[item.args[0]];\n\n    if (!script) {\n      continue;\n    }\n\n    scripts.push(script);\n  }\n\n  var _this = this;\n\n  if (!scripts.length) {\n    return execPipeline();\n  }\n\n  return this.redis.script(\"exists\", Array.from(new Set(scripts.map(({\n    sha\n  }) => sha)))).then(function (results) {\n    var pending = [];\n\n    for (var i = 0; i < results.length; ++i) {\n      if (!results[i]) {\n        pending.push(scripts[i]);\n      }\n    }\n\n    var Promise = PromiseContainer.get();\n    return Promise.all(pending.map(function (script) {\n      return _this.redis.script(\"load\", script.lua);\n    }));\n  }).then(execPipeline);\n\n  function execPipeline() {\n    let data = \"\";\n    let buffers;\n    let writePending = _this.replyPending = _this._queue.length;\n    let node;\n\n    if (_this.isCluster) {\n      node = {\n        slot: pipelineSlot,\n        redis: _this.redis.connectionPool.nodes.all[_this.preferKey]\n      };\n    }\n\n    let bufferMode = false;\n    const stream = {\n      write: function (writable) {\n        if (writable instanceof Buffer) {\n          bufferMode = true;\n        }\n\n        if (bufferMode) {\n          if (!buffers) {\n            buffers = [];\n          }\n\n          if (typeof data === \"string\") {\n            buffers.push(Buffer.from(data, \"utf8\"));\n            data = undefined;\n          }\n\n          buffers.push(typeof writable === \"string\" ? Buffer.from(writable, \"utf8\") : writable);\n        } else {\n          data += writable;\n        }\n\n        if (! --writePending) {\n          let sendData;\n\n          if (buffers) {\n            sendData = Buffer.concat(buffers);\n          } else {\n            sendData = data;\n          }\n\n          if (_this.isCluster) {\n            node.redis.stream.write(sendData);\n          } else {\n            _this.redis.stream.write(sendData);\n          } // Reset writePending for resending\n\n\n          writePending = _this._queue.length;\n          data = \"\";\n          buffers = undefined;\n          bufferMode = false;\n        }\n      }\n    };\n\n    for (let i = 0; i < _this._queue.length; ++i) {\n      _this.redis.sendCommand(_this._queue[i], stream, node);\n    }\n\n    return _this.promise;\n  }\n};","map":{"version":3,"sources":["C:/Users/gamem/codecademy/node_modules/ioredis/built/pipeline.js"],"names":["Object","defineProperty","exports","value","command_1","require","util_1","standard_as_callback_1","redis_commands_1","cluster_key_slot_1","PromiseContainer","commander_1","Pipeline","redis","default","call","isCluster","constructor","name","options","_queue","_result","_transactions","_shaToScript","keys","scriptsSet","forEach","script","sha","Promise","get","promise","resolve","reject","_this","length","assign","prototype","fillResult","position","Array","isArray","execLength","i","Error","cmd","transformReply","err","replyPending","retriable","commonError","inTransaction","error","command","message","isReadOnly","exists","hasFlag","errv","split","queue","asking","ignore","sendCommand","initPromise","matched","leftRedirections","exec","handleError","moved","slot","key","preferKey","slots","refreshSlotsCache","ask","tryagain","clusterDown","connectionClosed","maxRedirections","defaults","ignoredCount","slice","then","result","catch","push","addBatch","commands","commandName","args","apply","multi","arguments","execBuffer","deprecate","callback","dropBufferSupport","nodeifiedPromise","pipelineSlot","sampleKeys","getKeys","generateMulti","Math","random","scripts","item","isCustomCommand","execPipeline","from","Set","map","results","pending","all","lua","data","buffers","writePending","node","connectionPool","nodes","bufferMode","stream","write","writable","Buffer","undefined","sendData","concat"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst util_1 = require(\"util\");\nconst standard_as_callback_1 = require(\"standard-as-callback\");\nconst redis_commands_1 = require(\"redis-commands\");\nconst cluster_key_slot_1 = require(\"cluster-key-slot\");\nconst PromiseContainer = require(\"./promiseContainer\");\nconst commander_1 = require(\"./commander\");\nfunction Pipeline(redis) {\n    commander_1.default.call(this);\n    this.redis = redis;\n    this.isCluster = this.redis.constructor.name === \"Cluster\";\n    this.options = redis.options;\n    this._queue = [];\n    this._result = [];\n    this._transactions = 0;\n    this._shaToScript = {};\n    Object.keys(redis.scriptsSet).forEach(name => {\n        const script = redis.scriptsSet[name];\n        this._shaToScript[script.sha] = script;\n        this[name] = redis[name];\n        this[name + \"Buffer\"] = redis[name + \"Buffer\"];\n    });\n    const Promise = PromiseContainer.get();\n    this.promise = new Promise((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n    });\n    const _this = this;\n    Object.defineProperty(this, \"length\", {\n        get: function () {\n            return _this._queue.length;\n        }\n    });\n}\nexports.default = Pipeline;\nObject.assign(Pipeline.prototype, commander_1.default.prototype);\nPipeline.prototype.fillResult = function (value, position) {\n    if (this._queue[position].name === \"exec\" && Array.isArray(value[1])) {\n        var execLength = value[1].length;\n        for (let i = 0; i < execLength; i++) {\n            if (value[1][i] instanceof Error) {\n                continue;\n            }\n            const cmd = this._queue[position - (execLength - i)];\n            try {\n                value[1][i] = cmd.transformReply(value[1][i]);\n            }\n            catch (err) {\n                value[1][i] = err;\n            }\n        }\n    }\n    this._result[position] = value;\n    if (--this.replyPending) {\n        return;\n    }\n    if (this.isCluster) {\n        let retriable = true;\n        let commonError;\n        let inTransaction;\n        for (let i = 0; i < this._result.length; ++i) {\n            var error = this._result[i][0];\n            var command = this._queue[i];\n            if (command.name === \"multi\") {\n                inTransaction = true;\n            }\n            else if (command.name === \"exec\") {\n                inTransaction = false;\n            }\n            if (error) {\n                if (command.name === \"exec\" &&\n                    error.message ===\n                        \"EXECABORT Transaction discarded because of previous errors.\") {\n                    continue;\n                }\n                if (!commonError) {\n                    commonError = {\n                        name: error.name,\n                        message: error.message\n                    };\n                }\n                else if (commonError.name !== error.name ||\n                    commonError.message !== error.message) {\n                    retriable = false;\n                    break;\n                }\n            }\n            else if (!inTransaction) {\n                var isReadOnly = redis_commands_1.exists(command.name) && redis_commands_1.hasFlag(command.name, \"readonly\");\n                if (!isReadOnly) {\n                    retriable = false;\n                    break;\n                }\n            }\n        }\n        if (commonError && retriable) {\n            var _this = this;\n            var errv = commonError.message.split(\" \");\n            var queue = this._queue;\n            inTransaction = false;\n            this._queue = [];\n            for (let i = 0; i < queue.length; ++i) {\n                if (errv[0] === \"ASK\" &&\n                    !inTransaction &&\n                    queue[i].name !== \"asking\" &&\n                    (!queue[i - 1] || queue[i - 1].name !== \"asking\")) {\n                    var asking = new command_1.default(\"asking\");\n                    asking.ignore = true;\n                    this.sendCommand(asking);\n                }\n                queue[i].initPromise();\n                this.sendCommand(queue[i]);\n                if (queue[i].name === \"multi\") {\n                    inTransaction = true;\n                }\n                else if (queue[i].name === \"exec\") {\n                    inTransaction = false;\n                }\n            }\n            let matched = true;\n            if (typeof this.leftRedirections === \"undefined\") {\n                this.leftRedirections = {};\n            }\n            const exec = function () {\n                _this.exec();\n            };\n            this.redis.handleError(commonError, this.leftRedirections, {\n                moved: function (slot, key) {\n                    _this.preferKey = key;\n                    _this.redis.slots[errv[1]] = [key];\n                    _this.redis.refreshSlotsCache();\n                    _this.exec();\n                },\n                ask: function (slot, key) {\n                    _this.preferKey = key;\n                    _this.exec();\n                },\n                tryagain: exec,\n                clusterDown: exec,\n                connectionClosed: exec,\n                maxRedirections: () => {\n                    matched = false;\n                },\n                defaults: () => {\n                    matched = false;\n                }\n            });\n            if (matched) {\n                return;\n            }\n        }\n    }\n    let ignoredCount = 0;\n    for (let i = 0; i < this._queue.length - ignoredCount; ++i) {\n        if (this._queue[i + ignoredCount].ignore) {\n            ignoredCount += 1;\n        }\n        this._result[i] = this._result[i + ignoredCount];\n    }\n    this.resolve(this._result.slice(0, this._result.length - ignoredCount));\n};\nPipeline.prototype.sendCommand = function (command) {\n    const position = this._queue.length;\n    command.promise\n        .then(result => {\n        this.fillResult([null, result], position);\n    })\n        .catch(error => {\n        this.fillResult([error], position);\n    });\n    this._queue.push(command);\n    return this;\n};\nPipeline.prototype.addBatch = function (commands) {\n    let command, commandName, args;\n    for (let i = 0; i < commands.length; ++i) {\n        command = commands[i];\n        commandName = command[0];\n        args = command.slice(1);\n        this[commandName].apply(this, args);\n    }\n    return this;\n};\nconst multi = Pipeline.prototype.multi;\nPipeline.prototype.multi = function () {\n    this._transactions += 1;\n    return multi.apply(this, arguments);\n};\nconst execBuffer = Pipeline.prototype.execBuffer;\nconst exec = Pipeline.prototype.exec;\nPipeline.prototype.execBuffer = util_1.deprecate(function () {\n    if (this._transactions > 0) {\n        this._transactions -= 1;\n    }\n    return execBuffer.apply(this, arguments);\n}, \"Pipeline#execBuffer: Use Pipeline#exec instead\");\nPipeline.prototype.exec = function (callback) {\n    if (this._transactions > 0) {\n        this._transactions -= 1;\n        return (this.options.dropBufferSupport ? exec : execBuffer).apply(this, arguments);\n    }\n    if (!this.nodeifiedPromise) {\n        this.nodeifiedPromise = true;\n        standard_as_callback_1.default(this.promise, callback);\n    }\n    if (!this._queue.length) {\n        this.resolve([]);\n    }\n    let pipelineSlot;\n    if (this.isCluster) {\n        // List of the first key for each command\n        const sampleKeys = [];\n        for (let i = 0; i < this._queue.length; i++) {\n            var keys = this._queue[i].getKeys();\n            if (keys.length) {\n                sampleKeys.push(keys[0]);\n            }\n        }\n        if (sampleKeys.length) {\n            pipelineSlot = cluster_key_slot_1.generateMulti(sampleKeys);\n            if (pipelineSlot < 0) {\n                this.reject(new Error(\"All keys in the pipeline should belong to the same slot\"));\n                return this.promise;\n            }\n        }\n        else {\n            // Send the pipeline to a random node\n            pipelineSlot = (Math.random() * 16384) | 0;\n        }\n    }\n    // Check whether scripts exists\n    const scripts = [];\n    for (let i = 0; i < this._queue.length; ++i) {\n        var item = this._queue[i];\n        if (this.isCluster && item.isCustomCommand) {\n            this.reject(new Error(\"Sending custom commands in pipeline is not supported in Cluster mode.\"));\n            return this.promise;\n        }\n        if (item.name !== \"evalsha\") {\n            continue;\n        }\n        const script = this._shaToScript[item.args[0]];\n        if (!script) {\n            continue;\n        }\n        scripts.push(script);\n    }\n    var _this = this;\n    if (!scripts.length) {\n        return execPipeline();\n    }\n    return this.redis\n        .script(\"exists\", Array.from(new Set(scripts.map(({ sha }) => sha))))\n        .then(function (results) {\n        var pending = [];\n        for (var i = 0; i < results.length; ++i) {\n            if (!results[i]) {\n                pending.push(scripts[i]);\n            }\n        }\n        var Promise = PromiseContainer.get();\n        return Promise.all(pending.map(function (script) {\n            return _this.redis.script(\"load\", script.lua);\n        }));\n    })\n        .then(execPipeline);\n    function execPipeline() {\n        let data = \"\";\n        let buffers;\n        let writePending = (_this.replyPending = _this._queue.length);\n        let node;\n        if (_this.isCluster) {\n            node = {\n                slot: pipelineSlot,\n                redis: _this.redis.connectionPool.nodes.all[_this.preferKey]\n            };\n        }\n        let bufferMode = false;\n        const stream = {\n            write: function (writable) {\n                if (writable instanceof Buffer) {\n                    bufferMode = true;\n                }\n                if (bufferMode) {\n                    if (!buffers) {\n                        buffers = [];\n                    }\n                    if (typeof data === \"string\") {\n                        buffers.push(Buffer.from(data, \"utf8\"));\n                        data = undefined;\n                    }\n                    buffers.push(typeof writable === \"string\"\n                        ? Buffer.from(writable, \"utf8\")\n                        : writable);\n                }\n                else {\n                    data += writable;\n                }\n                if (!--writePending) {\n                    let sendData;\n                    if (buffers) {\n                        sendData = Buffer.concat(buffers);\n                    }\n                    else {\n                        sendData = data;\n                    }\n                    if (_this.isCluster) {\n                        node.redis.stream.write(sendData);\n                    }\n                    else {\n                        _this.redis.stream.write(sendData);\n                    }\n                    // Reset writePending for resending\n                    writePending = _this._queue.length;\n                    data = \"\";\n                    buffers = undefined;\n                    bufferMode = false;\n                }\n            }\n        };\n        for (let i = 0; i < _this._queue.length; ++i) {\n            _this.redis.sendCommand(_this._queue[i], stream, node);\n        }\n        return _this.promise;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}