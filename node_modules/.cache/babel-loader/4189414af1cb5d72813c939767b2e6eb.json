{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"../utils\");\n\nconst Deque = require(\"denque\");\n\nconst debug = utils_1.Debug(\"delayqueue\");\n/**\n * Queue that runs items after specified duration\n *\n * @export\n * @class DelayQueue\n */\n\nclass DelayQueue {\n  constructor() {\n    this.queues = {};\n    this.timeouts = {};\n  }\n  /**\n   * Add a new item to the queue\n   *\n   * @param {string} bucket bucket name\n   * @param {Function} item function that will run later\n   * @param {IDelayQueueOptions} options\n   * @memberof DelayQueue\n   */\n\n\n  push(bucket, item, options) {\n    const callback = options.callback || process.nextTick;\n\n    if (!this.queues[bucket]) {\n      this.queues[bucket] = new Deque();\n    }\n\n    const queue = this.queues[bucket];\n    queue.push(item);\n\n    if (!this.timeouts[bucket]) {\n      this.timeouts[bucket] = setTimeout(() => {\n        callback(() => {\n          this.timeouts[bucket] = null;\n          this.execute(bucket);\n        });\n      }, options.timeout);\n    }\n  }\n\n  execute(bucket) {\n    const queue = this.queues[bucket];\n\n    if (!queue) {\n      return;\n    }\n\n    const {\n      length\n    } = queue;\n\n    if (!length) {\n      return;\n    }\n\n    debug(\"send %d commands in %s queue\", length, bucket);\n    this.queues[bucket] = null;\n\n    while (queue.length > 0) {\n      queue.shift()();\n    }\n  }\n\n}\n\nexports.default = DelayQueue;","map":{"version":3,"sources":["C:/Users/gamem/codecademy/node_modules/ioredis/built/cluster/DelayQueue.js"],"names":["Object","defineProperty","exports","value","utils_1","require","Deque","debug","Debug","DelayQueue","constructor","queues","timeouts","push","bucket","item","options","callback","process","nextTick","queue","setTimeout","execute","timeout","length","shift","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAArB;;AACA,MAAME,KAAK,GAAGH,OAAO,CAACI,KAAR,CAAc,YAAd,CAAd;AACA;;;;;;;AAMA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACH;AACD;;;;;;;;;;AAQAC,EAAAA,IAAI,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwB;AACxB,UAAMC,QAAQ,GAAGD,OAAO,CAACC,QAAR,IAAoBC,OAAO,CAACC,QAA7C;;AACA,QAAI,CAAC,KAAKR,MAAL,CAAYG,MAAZ,CAAL,EAA0B;AACtB,WAAKH,MAAL,CAAYG,MAAZ,IAAsB,IAAIR,KAAJ,EAAtB;AACH;;AACD,UAAMc,KAAK,GAAG,KAAKT,MAAL,CAAYG,MAAZ,CAAd;AACAM,IAAAA,KAAK,CAACP,IAAN,CAAWE,IAAX;;AACA,QAAI,CAAC,KAAKH,QAAL,CAAcE,MAAd,CAAL,EAA4B;AACxB,WAAKF,QAAL,CAAcE,MAAd,IAAwBO,UAAU,CAAC,MAAM;AACrCJ,QAAAA,QAAQ,CAAC,MAAM;AACX,eAAKL,QAAL,CAAcE,MAAd,IAAwB,IAAxB;AACA,eAAKQ,OAAL,CAAaR,MAAb;AACH,SAHO,CAAR;AAIH,OALiC,EAK/BE,OAAO,CAACO,OALuB,CAAlC;AAMH;AACJ;;AACDD,EAAAA,OAAO,CAACR,MAAD,EAAS;AACZ,UAAMM,KAAK,GAAG,KAAKT,MAAL,CAAYG,MAAZ,CAAd;;AACA,QAAI,CAACM,KAAL,EAAY;AACR;AACH;;AACD,UAAM;AAAEI,MAAAA;AAAF,QAAaJ,KAAnB;;AACA,QAAI,CAACI,MAAL,EAAa;AACT;AACH;;AACDjB,IAAAA,KAAK,CAAC,8BAAD,EAAiCiB,MAAjC,EAAyCV,MAAzC,CAAL;AACA,SAAKH,MAAL,CAAYG,MAAZ,IAAsB,IAAtB;;AACA,WAAOM,KAAK,CAACI,MAAN,GAAe,CAAtB,EAAyB;AACrBJ,MAAAA,KAAK,CAACK,KAAN;AACH;AACJ;;AA3CY;;AA6CjBvB,OAAO,CAACwB,OAAR,GAAkBjB,UAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../utils\");\nconst Deque = require(\"denque\");\nconst debug = utils_1.Debug(\"delayqueue\");\n/**\n * Queue that runs items after specified duration\n *\n * @export\n * @class DelayQueue\n */\nclass DelayQueue {\n    constructor() {\n        this.queues = {};\n        this.timeouts = {};\n    }\n    /**\n     * Add a new item to the queue\n     *\n     * @param {string} bucket bucket name\n     * @param {Function} item function that will run later\n     * @param {IDelayQueueOptions} options\n     * @memberof DelayQueue\n     */\n    push(bucket, item, options) {\n        const callback = options.callback || process.nextTick;\n        if (!this.queues[bucket]) {\n            this.queues[bucket] = new Deque();\n        }\n        const queue = this.queues[bucket];\n        queue.push(item);\n        if (!this.timeouts[bucket]) {\n            this.timeouts[bucket] = setTimeout(() => {\n                callback(() => {\n                    this.timeouts[bucket] = null;\n                    this.execute(bucket);\n                });\n            }, options.timeout);\n        }\n    }\n    execute(bucket) {\n        const queue = this.queues[bucket];\n        if (!queue) {\n            return;\n        }\n        const { length } = queue;\n        if (!length) {\n            return;\n        }\n        debug(\"send %d commands in %s queue\", length, bucket);\n        this.queues[bucket] = null;\n        while (queue.length > 0) {\n            queue.shift()();\n        }\n    }\n}\nexports.default = DelayQueue;\n"]},"metadata":{},"sourceType":"script"}