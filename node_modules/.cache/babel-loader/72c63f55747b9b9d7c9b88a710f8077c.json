{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst debug_1 = require(\"debug\");\n\nconst MAX_ARGUMENT_LENGTH = 200;\nexports.MAX_ARGUMENT_LENGTH = MAX_ARGUMENT_LENGTH;\nconst NAMESPACE_PREFIX = \"ioredis\";\n/**\n * helper function that tried to get a string value for\n * arbitrary \"debug\" arg\n */\n\nfunction getStringValue(v) {\n  if (v === null) {\n    return;\n  }\n\n  switch (typeof v) {\n    case \"boolean\":\n      return;\n\n    case \"number\":\n      return;\n\n    case \"object\":\n      if (Buffer.isBuffer(v)) {\n        return v.toString(\"hex\");\n      }\n\n      if (Array.isArray(v)) {\n        return v.join(\",\");\n      }\n\n      try {\n        return JSON.stringify(v);\n      } catch (e) {\n        return;\n      }\n\n    case \"string\":\n      return v;\n  }\n}\n\nexports.getStringValue = getStringValue;\n/**\n * helper function that redacts a string representation of a \"debug\" arg\n */\n\nfunction genRedactedString(str, maxLen) {\n  const {\n    length\n  } = str;\n  return length <= maxLen ? str : str.slice(0, maxLen) + ' ... <REDACTED full-length=\"' + length + '\">';\n}\n\nexports.genRedactedString = genRedactedString;\n/**\n * a wrapper for the `debug` module, used to generate\n * \"debug functions\" that trim the values in their output\n */\n\nfunction genDebugFunction(namespace) {\n  const fn = debug_1.default(`${NAMESPACE_PREFIX}:${namespace}`);\n\n  function wrappedDebug(...args) {\n    if (!fn.enabled) {\n      return; // no-op\n    } // we skip the first arg because that is the message\n\n\n    for (let i = 1; i < args.length; i++) {\n      const str = getStringValue(args[i]);\n\n      if (typeof str === \"string\" && str.length > MAX_ARGUMENT_LENGTH) {\n        args[i] = genRedactedString(str, MAX_ARGUMENT_LENGTH);\n      }\n    }\n\n    return fn.apply(null, args);\n  }\n\n  Object.defineProperties(wrappedDebug, {\n    namespace: {\n      get() {\n        return fn.namespace;\n      }\n\n    },\n    enabled: {\n      get() {\n        return fn.enabled;\n      }\n\n    },\n    destroy: {\n      get() {\n        return fn.destroy;\n      }\n\n    },\n    log: {\n      get() {\n        return fn.log;\n      },\n\n      set(l) {\n        fn.log = l;\n      }\n\n    }\n  });\n  return wrappedDebug;\n}\n\nexports.default = genDebugFunction;","map":{"version":3,"sources":["C:/Users/gamem/codecademy/node_modules/ioredis/built/utils/debug.js"],"names":["Object","defineProperty","exports","value","debug_1","require","MAX_ARGUMENT_LENGTH","NAMESPACE_PREFIX","getStringValue","v","Buffer","isBuffer","toString","Array","isArray","join","JSON","stringify","e","genRedactedString","str","maxLen","length","slice","genDebugFunction","namespace","fn","default","wrappedDebug","args","enabled","i","apply","defineProperties","get","destroy","log","set","l"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = require(\"debug\");\nconst MAX_ARGUMENT_LENGTH = 200;\nexports.MAX_ARGUMENT_LENGTH = MAX_ARGUMENT_LENGTH;\nconst NAMESPACE_PREFIX = \"ioredis\";\n/**\n * helper function that tried to get a string value for\n * arbitrary \"debug\" arg\n */\nfunction getStringValue(v) {\n    if (v === null) {\n        return;\n    }\n    switch (typeof v) {\n        case \"boolean\":\n            return;\n        case \"number\":\n            return;\n        case \"object\":\n            if (Buffer.isBuffer(v)) {\n                return v.toString(\"hex\");\n            }\n            if (Array.isArray(v)) {\n                return v.join(\",\");\n            }\n            try {\n                return JSON.stringify(v);\n            }\n            catch (e) {\n                return;\n            }\n        case \"string\":\n            return v;\n    }\n}\nexports.getStringValue = getStringValue;\n/**\n * helper function that redacts a string representation of a \"debug\" arg\n */\nfunction genRedactedString(str, maxLen) {\n    const { length } = str;\n    return length <= maxLen\n        ? str\n        : str.slice(0, maxLen) + ' ... <REDACTED full-length=\"' + length + '\">';\n}\nexports.genRedactedString = genRedactedString;\n/**\n * a wrapper for the `debug` module, used to generate\n * \"debug functions\" that trim the values in their output\n */\nfunction genDebugFunction(namespace) {\n    const fn = debug_1.default(`${NAMESPACE_PREFIX}:${namespace}`);\n    function wrappedDebug(...args) {\n        if (!fn.enabled) {\n            return; // no-op\n        }\n        // we skip the first arg because that is the message\n        for (let i = 1; i < args.length; i++) {\n            const str = getStringValue(args[i]);\n            if (typeof str === \"string\" && str.length > MAX_ARGUMENT_LENGTH) {\n                args[i] = genRedactedString(str, MAX_ARGUMENT_LENGTH);\n            }\n        }\n        return fn.apply(null, args);\n    }\n    Object.defineProperties(wrappedDebug, {\n        namespace: {\n            get() {\n                return fn.namespace;\n            }\n        },\n        enabled: {\n            get() {\n                return fn.enabled;\n            }\n        },\n        destroy: {\n            get() {\n                return fn.destroy;\n            }\n        },\n        log: {\n            get() {\n                return fn.log;\n            },\n            set(l) {\n                fn.log = l;\n            }\n        }\n    });\n    return wrappedDebug;\n}\nexports.default = genDebugFunction;\n"]},"metadata":{},"sourceType":"script"}