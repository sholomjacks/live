{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\gamem\\\\codecademy\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\gamem\\\\codecademy\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crypto_1 = require(\"crypto\");\n\nvar promiseContainer_1 = require(\"./promiseContainer\");\n\nvar command_1 = require(\"./command\");\n\nvar standard_as_callback_1 = require(\"standard-as-callback\");\n\nvar Script =\n/*#__PURE__*/\nfunction () {\n  function Script(lua) {\n    var numberOfKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var keyPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    var readOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    _classCallCheck(this, Script);\n\n    this.lua = lua;\n    this.numberOfKeys = numberOfKeys;\n    this.keyPrefix = keyPrefix;\n    this.readOnly = readOnly;\n    this.sha = crypto_1.createHash(\"sha1\").update(lua).digest(\"hex\");\n  }\n\n  _createClass(Script, [{\n    key: \"execute\",\n    value: function execute(container, args, options, callback) {\n      var _this = this;\n\n      if (typeof this.numberOfKeys === \"number\") {\n        args.unshift(this.numberOfKeys);\n      }\n\n      if (this.keyPrefix) {\n        options.keyPrefix = this.keyPrefix;\n      }\n\n      if (this.readOnly) {\n        options.readOnly = true;\n      }\n\n      var evalsha = new command_1.default(\"evalsha\", [this.sha].concat(args), options);\n      evalsha.isCustomCommand = true;\n      var result = container.sendCommand(evalsha);\n\n      if (promiseContainer_1.isPromise(result)) {\n        return standard_as_callback_1.default(result.catch(function (err) {\n          if (err.toString().indexOf(\"NOSCRIPT\") === -1) {\n            throw err;\n          }\n\n          return container.sendCommand(new command_1.default(\"eval\", [_this.lua].concat(args), options));\n        }), callback);\n      } // result is not a Promise--probably returned from a pipeline chain; however,\n      // we still need the callback to fire when the script is evaluated\n\n\n      standard_as_callback_1.default(evalsha.promise, callback);\n      return result;\n    }\n  }]);\n\n  return Script;\n}();\n\nexports.default = Script;","map":{"version":3,"sources":["C:/Users/gamem/codecademy/node_modules/ioredis/built/script.js"],"names":["Object","defineProperty","exports","value","crypto_1","require","promiseContainer_1","command_1","standard_as_callback_1","Script","lua","numberOfKeys","keyPrefix","readOnly","sha","createHash","update","digest","container","args","options","callback","unshift","evalsha","default","concat","isCustomCommand","result","sendCommand","isPromise","catch","err","toString","indexOf","promise"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,IAAMC,kBAAkB,GAAGD,OAAO,CAAC,oBAAD,CAAlC;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMG,sBAAsB,GAAGH,OAAO,CAAC,sBAAD,CAAtC;;IACMI,M;;;AACF,kBAAYC,GAAZ,EAAwE;AAAA,QAAvDC,YAAuD,uEAAxC,IAAwC;AAAA,QAAlCC,SAAkC,uEAAtB,EAAsB;AAAA,QAAlBC,QAAkB,uEAAP,KAAO;;AAAA;;AACpE,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,GAAL,GAAWV,QAAQ,CAACW,UAAT,CAAoB,MAApB,EACNC,MADM,CACCN,GADD,EAENO,MAFM,CAEC,KAFD,CAAX;AAGH;;;;4BACOC,S,EAAWC,I,EAAMC,O,EAASC,Q,EAAU;AAAA;;AACxC,UAAI,OAAO,KAAKV,YAAZ,KAA6B,QAAjC,EAA2C;AACvCQ,QAAAA,IAAI,CAACG,OAAL,CAAa,KAAKX,YAAlB;AACH;;AACD,UAAI,KAAKC,SAAT,EAAoB;AAChBQ,QAAAA,OAAO,CAACR,SAAR,GAAoB,KAAKA,SAAzB;AACH;;AACD,UAAI,KAAKC,QAAT,EAAmB;AACfO,QAAAA,OAAO,CAACP,QAAR,GAAmB,IAAnB;AACH;;AACD,UAAMU,OAAO,GAAG,IAAIhB,SAAS,CAACiB,OAAd,CAAsB,SAAtB,EAAiC,CAAC,KAAKV,GAAN,EAAWW,MAAX,CAAkBN,IAAlB,CAAjC,EAA0DC,OAA1D,CAAhB;AACAG,MAAAA,OAAO,CAACG,eAAR,GAA0B,IAA1B;AACA,UAAMC,MAAM,GAAGT,SAAS,CAACU,WAAV,CAAsBL,OAAtB,CAAf;;AACA,UAAIjB,kBAAkB,CAACuB,SAAnB,CAA6BF,MAA7B,CAAJ,EAA0C;AACtC,eAAOnB,sBAAsB,CAACgB,OAAvB,CAA+BG,MAAM,CAACG,KAAP,CAAa,UAAAC,GAAG,EAAI;AACtD,cAAIA,GAAG,CAACC,QAAJ,GAAeC,OAAf,CAAuB,UAAvB,MAAuC,CAAC,CAA5C,EAA+C;AAC3C,kBAAMF,GAAN;AACH;;AACD,iBAAOb,SAAS,CAACU,WAAV,CAAsB,IAAIrB,SAAS,CAACiB,OAAd,CAAsB,MAAtB,EAA8B,CAAC,KAAI,CAACd,GAAN,EAAWe,MAAX,CAAkBN,IAAlB,CAA9B,EAAuDC,OAAvD,CAAtB,CAAP;AACH,SALqC,CAA/B,EAKHC,QALG,CAAP;AAMH,OApBuC,CAqBxC;AACA;;;AACAb,MAAAA,sBAAsB,CAACgB,OAAvB,CAA+BD,OAAO,CAACW,OAAvC,EAAgDb,QAAhD;AACA,aAAOM,MAAP;AACH;;;;;;AAELzB,OAAO,CAACsB,OAAR,GAAkBf,MAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nconst promiseContainer_1 = require(\"./promiseContainer\");\nconst command_1 = require(\"./command\");\nconst standard_as_callback_1 = require(\"standard-as-callback\");\nclass Script {\n    constructor(lua, numberOfKeys = null, keyPrefix = \"\", readOnly = false) {\n        this.lua = lua;\n        this.numberOfKeys = numberOfKeys;\n        this.keyPrefix = keyPrefix;\n        this.readOnly = readOnly;\n        this.sha = crypto_1.createHash(\"sha1\")\n            .update(lua)\n            .digest(\"hex\");\n    }\n    execute(container, args, options, callback) {\n        if (typeof this.numberOfKeys === \"number\") {\n            args.unshift(this.numberOfKeys);\n        }\n        if (this.keyPrefix) {\n            options.keyPrefix = this.keyPrefix;\n        }\n        if (this.readOnly) {\n            options.readOnly = true;\n        }\n        const evalsha = new command_1.default(\"evalsha\", [this.sha].concat(args), options);\n        evalsha.isCustomCommand = true;\n        const result = container.sendCommand(evalsha);\n        if (promiseContainer_1.isPromise(result)) {\n            return standard_as_callback_1.default(result.catch(err => {\n                if (err.toString().indexOf(\"NOSCRIPT\") === -1) {\n                    throw err;\n                }\n                return container.sendCommand(new command_1.default(\"eval\", [this.lua].concat(args), options));\n            }), callback);\n        }\n        // result is not a Promise--probably returned from a pipeline chain; however,\n        // we still need the callback to fire when the script is evaluated\n        standard_as_callback_1.default(evalsha.promise, callback);\n        return result;\n    }\n}\nexports.default = Script;\n"]},"metadata":{},"sourceType":"script"}