{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\gamem\\\\codecademy\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\gamem\\\\codecademy\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Tiny class to simplify dealing with subscription set\n *\n * @export\n * @class SubscriptionSet\n */\n\nvar SubscriptionSet =\n/*#__PURE__*/\nfunction () {\n  function SubscriptionSet() {\n    _classCallCheck(this, SubscriptionSet);\n\n    this.set = {\n      subscribe: {},\n      psubscribe: {}\n    };\n  }\n\n  _createClass(SubscriptionSet, [{\n    key: \"add\",\n    value: function add(set, channel) {\n      this.set[mapSet(set)][channel] = true;\n    }\n  }, {\n    key: \"del\",\n    value: function del(set, channel) {\n      delete this.set[mapSet(set)][channel];\n    }\n  }, {\n    key: \"channels\",\n    value: function channels(set) {\n      return Object.keys(this.set[mapSet(set)]);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.channels(\"subscribe\").length === 0 && this.channels(\"psubscribe\").length === 0;\n    }\n  }]);\n\n  return SubscriptionSet;\n}();\n\nexports.default = SubscriptionSet;\n\nfunction mapSet(set) {\n  if (set === \"unsubscribe\") {\n    return \"subscribe\";\n  }\n\n  if (set === \"punsubscribe\") {\n    return \"psubscribe\";\n  }\n\n  return set;\n}","map":{"version":3,"sources":["C:/Users/gamem/codecademy/node_modules/ioredis/built/SubscriptionSet.js"],"names":["Object","defineProperty","exports","value","SubscriptionSet","set","subscribe","psubscribe","channel","mapSet","keys","channels","length","default"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;IAMMC,e;;;AACF,6BAAc;AAAA;;AACV,SAAKC,GAAL,GAAW;AACPC,MAAAA,SAAS,EAAE,EADJ;AAEPC,MAAAA,UAAU,EAAE;AAFL,KAAX;AAIH;;;;wBACGF,G,EAAKG,O,EAAS;AACd,WAAKH,GAAL,CAASI,MAAM,CAACJ,GAAD,CAAf,EAAsBG,OAAtB,IAAiC,IAAjC;AACH;;;wBACGH,G,EAAKG,O,EAAS;AACd,aAAO,KAAKH,GAAL,CAASI,MAAM,CAACJ,GAAD,CAAf,EAAsBG,OAAtB,CAAP;AACH;;;6BACQH,G,EAAK;AACV,aAAOL,MAAM,CAACU,IAAP,CAAY,KAAKL,GAAL,CAASI,MAAM,CAACJ,GAAD,CAAf,CAAZ,CAAP;AACH;;;8BACS;AACN,aAAQ,KAAKM,QAAL,CAAc,WAAd,EAA2BC,MAA3B,KAAsC,CAAtC,IACJ,KAAKD,QAAL,CAAc,YAAd,EAA4BC,MAA5B,KAAuC,CAD3C;AAEH;;;;;;AAELV,OAAO,CAACW,OAAR,GAAkBT,eAAlB;;AACA,SAASK,MAAT,CAAgBJ,GAAhB,EAAqB;AACjB,MAAIA,GAAG,KAAK,aAAZ,EAA2B;AACvB,WAAO,WAAP;AACH;;AACD,MAAIA,GAAG,KAAK,cAAZ,EAA4B;AACxB,WAAO,YAAP;AACH;;AACD,SAAOA,GAAP;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Tiny class to simplify dealing with subscription set\n *\n * @export\n * @class SubscriptionSet\n */\nclass SubscriptionSet {\n    constructor() {\n        this.set = {\n            subscribe: {},\n            psubscribe: {}\n        };\n    }\n    add(set, channel) {\n        this.set[mapSet(set)][channel] = true;\n    }\n    del(set, channel) {\n        delete this.set[mapSet(set)][channel];\n    }\n    channels(set) {\n        return Object.keys(this.set[mapSet(set)]);\n    }\n    isEmpty() {\n        return (this.channels(\"subscribe\").length === 0 &&\n            this.channels(\"psubscribe\").length === 0);\n    }\n}\nexports.default = SubscriptionSet;\nfunction mapSet(set) {\n    if (set === \"unsubscribe\") {\n        return \"subscribe\";\n    }\n    if (set === \"punsubscribe\") {\n        return \"psubscribe\";\n    }\n    return set;\n}\n"]},"metadata":{},"sourceType":"script"}