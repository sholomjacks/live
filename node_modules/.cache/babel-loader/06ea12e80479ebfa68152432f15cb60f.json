{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\gamem\\\\codecademy\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\gamem\\\\codecademy\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar command_1 = require(\"./command\");\n\nvar utils_1 = require(\"./utils\");\n\nvar RedisParser = require(\"redis-parser\");\n\nvar SubscriptionSet_1 = require(\"./SubscriptionSet\");\n\nvar debug = utils_1.Debug(\"dataHandler\");\n\nvar DataHandler =\n/*#__PURE__*/\nfunction () {\n  function DataHandler(redis, parserOptions) {\n    var _this = this;\n\n    _classCallCheck(this, DataHandler);\n\n    this.redis = redis;\n    var parser = new RedisParser({\n      stringNumbers: parserOptions.stringNumbers,\n      returnBuffers: !parserOptions.dropBufferSupport,\n      returnError: function returnError(err) {\n        _this.returnError(err);\n      },\n      returnFatalError: function returnFatalError(err) {\n        _this.returnFatalError(err);\n      },\n      returnReply: function returnReply(reply) {\n        _this.returnReply(reply);\n      }\n    });\n    redis.stream.on(\"data\", function (data) {\n      parser.execute(data);\n    });\n  }\n\n  _createClass(DataHandler, [{\n    key: \"returnFatalError\",\n    value: function returnFatalError(err) {\n      err.message += \". Please report this.\";\n      this.redis.recoverFromFatalError(err, err, {\n        offlineQueue: false\n      });\n    }\n  }, {\n    key: \"returnError\",\n    value: function returnError(err) {\n      var item = this.shiftCommand(err);\n\n      if (!item) {\n        return;\n      }\n\n      err.command = {\n        name: item.command.name,\n        args: item.command.args\n      };\n      this.redis.handleReconnection(err, item);\n    }\n  }, {\n    key: \"returnReply\",\n    value: function returnReply(reply) {\n      if (this.handleMonitorReply(reply)) {\n        return;\n      }\n\n      if (this.handleSubscriberReply(reply)) {\n        return;\n      }\n\n      var item = this.shiftCommand(reply);\n\n      if (!item) {\n        return;\n      }\n\n      if (command_1.default.checkFlag(\"ENTER_SUBSCRIBER_MODE\", item.command.name)) {\n        this.redis.condition.subscriber = new SubscriptionSet_1.default();\n        this.redis.condition.subscriber.add(item.command.name, reply[1].toString());\n\n        if (!fillSubCommand(item.command, reply[2])) {\n          this.redis.commandQueue.unshift(item);\n        }\n      } else if (command_1.default.checkFlag(\"EXIT_SUBSCRIBER_MODE\", item.command.name)) {\n        if (!fillUnsubCommand(item.command, reply[2])) {\n          this.redis.commandQueue.unshift(item);\n        }\n      } else {\n        item.command.resolve(reply);\n      }\n    }\n  }, {\n    key: \"handleSubscriberReply\",\n    value: function handleSubscriberReply(reply) {\n      if (!this.redis.condition.subscriber) {\n        return false;\n      }\n\n      var replyType = Array.isArray(reply) ? reply[0].toString() : null;\n      debug('receive reply \"%s\" in subscriber mode', replyType);\n\n      switch (replyType) {\n        case \"message\":\n          if (this.redis.listeners(\"message\").length > 0) {\n            // Check if there're listeners to avoid unnecessary `toString()`.\n            this.redis.emit(\"message\", reply[1].toString(), reply[2].toString());\n          }\n\n          this.redis.emit(\"messageBuffer\", reply[1], reply[2]);\n          break;\n\n        case \"pmessage\":\n          {\n            var pattern = reply[1].toString();\n\n            if (this.redis.listeners(\"pmessage\").length > 0) {\n              this.redis.emit(\"pmessage\", pattern, reply[2].toString(), reply[3].toString());\n            }\n\n            this.redis.emit(\"pmessageBuffer\", pattern, reply[2], reply[3]);\n            break;\n          }\n\n        case \"subscribe\":\n        case \"psubscribe\":\n          {\n            var channel = reply[1].toString();\n            this.redis.condition.subscriber.add(replyType, channel);\n            var item = this.shiftCommand(reply);\n\n            if (!item) {\n              return;\n            }\n\n            if (!fillSubCommand(item.command, reply[2])) {\n              this.redis.commandQueue.unshift(item);\n            }\n\n            break;\n          }\n\n        case \"unsubscribe\":\n        case \"punsubscribe\":\n          {\n            var _channel = reply[1] ? reply[1].toString() : null;\n\n            if (_channel) {\n              this.redis.condition.subscriber.del(replyType, _channel);\n            }\n\n            var count = reply[2];\n\n            if (count === 0) {\n              this.redis.condition.subscriber = false;\n            }\n\n            var _item = this.shiftCommand(reply);\n\n            if (!_item) {\n              return;\n            }\n\n            if (!fillUnsubCommand(_item.command, count)) {\n              this.redis.commandQueue.unshift(_item);\n            }\n\n            break;\n          }\n\n        default:\n          {\n            var _item2 = this.shiftCommand(reply);\n\n            if (!_item2) {\n              return;\n            }\n\n            _item2.command.resolve(reply);\n          }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"handleMonitorReply\",\n    value: function handleMonitorReply(reply) {\n      if (this.redis.status !== \"monitoring\") {\n        return false;\n      }\n\n      var replyStr = reply.toString();\n\n      if (replyStr === \"OK\") {\n        // Valid commands in the monitoring mode are AUTH and MONITOR,\n        // both of which always reply with 'OK'.\n        // So if we got an 'OK', we can make certain that\n        // the reply is made to AUTH & MONITO.\n        return false;\n      } // Since commands sent in the monitoring mode will trigger an exception,\n      // any replies we received in the monitoring mode should consider to be\n      // realtime monitor data instead of result of commands.\n\n\n      var len = replyStr.indexOf(\" \");\n      var timestamp = replyStr.slice(0, len);\n      var argindex = replyStr.indexOf('\"');\n      var args = replyStr.slice(argindex + 1, -1).split('\" \"').map(function (elem) {\n        return elem.replace(/\\\\\"/g, '\"');\n      });\n      var dbAndSource = replyStr.slice(len + 2, argindex - 2).split(\" \");\n      this.redis.emit(\"monitor\", timestamp, args, dbAndSource[1], dbAndSource[0]);\n      return true;\n    }\n  }, {\n    key: \"shiftCommand\",\n    value: function shiftCommand(reply) {\n      var item = this.redis.commandQueue.shift();\n\n      if (!item) {\n        var message = \"Command queue state error. If you can reproduce this, please report it.\";\n        var error = new Error(message + (reply instanceof Error ? \" Last error: \".concat(reply.message) : \" Last reply: \".concat(reply.toString())));\n        this.redis.emit(\"error\", error);\n        return null;\n      }\n\n      return item;\n    }\n  }]);\n\n  return DataHandler;\n}();\n\nexports.default = DataHandler;\n\nfunction fillSubCommand(command, count) {\n  // TODO: use WeakMap here\n  if (typeof command.remainReplies === \"undefined\") {\n    command.remainReplies = command.args.length;\n  }\n\n  if (--command.remainReplies === 0) {\n    command.resolve(count);\n    return true;\n  }\n\n  return false;\n}\n\nfunction fillUnsubCommand(command, count) {\n  if (typeof command.remainReplies === \"undefined\") {\n    command.remainReplies = command.args.length;\n  }\n\n  if (command.remainReplies === 0) {\n    if (count === 0) {\n      command.resolve(count);\n      return true;\n    }\n\n    return false;\n  }\n\n  if (--command.remainReplies === 0) {\n    command.resolve(count);\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/gamem/codecademy/node_modules/ioredis/built/DataHandler.js"],"names":["Object","defineProperty","exports","value","command_1","require","utils_1","RedisParser","SubscriptionSet_1","debug","Debug","DataHandler","redis","parserOptions","parser","stringNumbers","returnBuffers","dropBufferSupport","returnError","err","returnFatalError","returnReply","reply","stream","on","data","execute","message","recoverFromFatalError","offlineQueue","item","shiftCommand","command","name","args","handleReconnection","handleMonitorReply","handleSubscriberReply","default","checkFlag","condition","subscriber","add","toString","fillSubCommand","commandQueue","unshift","fillUnsubCommand","resolve","replyType","Array","isArray","listeners","length","emit","pattern","channel","del","count","status","replyStr","len","indexOf","timestamp","slice","argindex","split","map","elem","replace","dbAndSource","shift","error","Error","remainReplies"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,cAAD,CAA3B;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,mBAAD,CAAjC;;AACA,IAAMI,KAAK,GAAGH,OAAO,CAACI,KAAR,CAAc,aAAd,CAAd;;IACMC,W;;;AACF,uBAAYC,KAAZ,EAAmBC,aAAnB,EAAkC;AAAA;;AAAA;;AAC9B,SAAKD,KAAL,GAAaA,KAAb;AACA,QAAME,MAAM,GAAG,IAAIP,WAAJ,CAAgB;AAC3BQ,MAAAA,aAAa,EAAEF,aAAa,CAACE,aADF;AAE3BC,MAAAA,aAAa,EAAE,CAACH,aAAa,CAACI,iBAFH;AAG3BC,MAAAA,WAAW,EAAE,qBAACC,GAAD,EAAS;AAClB,QAAA,KAAI,CAACD,WAAL,CAAiBC,GAAjB;AACH,OAL0B;AAM3BC,MAAAA,gBAAgB,EAAE,0BAACD,GAAD,EAAS;AACvB,QAAA,KAAI,CAACC,gBAAL,CAAsBD,GAAtB;AACH,OAR0B;AAS3BE,MAAAA,WAAW,EAAE,qBAACC,KAAD,EAAW;AACpB,QAAA,KAAI,CAACD,WAAL,CAAiBC,KAAjB;AACH;AAX0B,KAAhB,CAAf;AAaAV,IAAAA,KAAK,CAACW,MAAN,CAAaC,EAAb,CAAgB,MAAhB,EAAwB,UAAAC,IAAI,EAAI;AAC5BX,MAAAA,MAAM,CAACY,OAAP,CAAeD,IAAf;AACH,KAFD;AAGH;;;;qCACgBN,G,EAAK;AAClBA,MAAAA,GAAG,CAACQ,OAAJ,IAAe,uBAAf;AACA,WAAKf,KAAL,CAAWgB,qBAAX,CAAiCT,GAAjC,EAAsCA,GAAtC,EAA2C;AAAEU,QAAAA,YAAY,EAAE;AAAhB,OAA3C;AACH;;;gCACWV,G,EAAK;AACb,UAAMW,IAAI,GAAG,KAAKC,YAAL,CAAkBZ,GAAlB,CAAb;;AACA,UAAI,CAACW,IAAL,EAAW;AACP;AACH;;AACDX,MAAAA,GAAG,CAACa,OAAJ,GAAc;AACVC,QAAAA,IAAI,EAAEH,IAAI,CAACE,OAAL,CAAaC,IADT;AAEVC,QAAAA,IAAI,EAAEJ,IAAI,CAACE,OAAL,CAAaE;AAFT,OAAd;AAIA,WAAKtB,KAAL,CAAWuB,kBAAX,CAA8BhB,GAA9B,EAAmCW,IAAnC;AACH;;;gCACWR,K,EAAO;AACf,UAAI,KAAKc,kBAAL,CAAwBd,KAAxB,CAAJ,EAAoC;AAChC;AACH;;AACD,UAAI,KAAKe,qBAAL,CAA2Bf,KAA3B,CAAJ,EAAuC;AACnC;AACH;;AACD,UAAMQ,IAAI,GAAG,KAAKC,YAAL,CAAkBT,KAAlB,CAAb;;AACA,UAAI,CAACQ,IAAL,EAAW;AACP;AACH;;AACD,UAAI1B,SAAS,CAACkC,OAAV,CAAkBC,SAAlB,CAA4B,uBAA5B,EAAqDT,IAAI,CAACE,OAAL,CAAaC,IAAlE,CAAJ,EAA6E;AACzE,aAAKrB,KAAL,CAAW4B,SAAX,CAAqBC,UAArB,GAAkC,IAAIjC,iBAAiB,CAAC8B,OAAtB,EAAlC;AACA,aAAK1B,KAAL,CAAW4B,SAAX,CAAqBC,UAArB,CAAgCC,GAAhC,CAAoCZ,IAAI,CAACE,OAAL,CAAaC,IAAjD,EAAuDX,KAAK,CAAC,CAAD,CAAL,CAASqB,QAAT,EAAvD;;AACA,YAAI,CAACC,cAAc,CAACd,IAAI,CAACE,OAAN,EAAeV,KAAK,CAAC,CAAD,CAApB,CAAnB,EAA6C;AACzC,eAAKV,KAAL,CAAWiC,YAAX,CAAwBC,OAAxB,CAAgChB,IAAhC;AACH;AACJ,OAND,MAOK,IAAI1B,SAAS,CAACkC,OAAV,CAAkBC,SAAlB,CAA4B,sBAA5B,EAAoDT,IAAI,CAACE,OAAL,CAAaC,IAAjE,CAAJ,EAA4E;AAC7E,YAAI,CAACc,gBAAgB,CAACjB,IAAI,CAACE,OAAN,EAAeV,KAAK,CAAC,CAAD,CAApB,CAArB,EAA+C;AAC3C,eAAKV,KAAL,CAAWiC,YAAX,CAAwBC,OAAxB,CAAgChB,IAAhC;AACH;AACJ,OAJI,MAKA;AACDA,QAAAA,IAAI,CAACE,OAAL,CAAagB,OAAb,CAAqB1B,KAArB;AACH;AACJ;;;0CACqBA,K,EAAO;AACzB,UAAI,CAAC,KAAKV,KAAL,CAAW4B,SAAX,CAAqBC,UAA1B,EAAsC;AAClC,eAAO,KAAP;AACH;;AACD,UAAMQ,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAc7B,KAAd,IAAuBA,KAAK,CAAC,CAAD,CAAL,CAASqB,QAAT,EAAvB,GAA6C,IAA/D;AACAlC,MAAAA,KAAK,CAAC,uCAAD,EAA0CwC,SAA1C,CAAL;;AACA,cAAQA,SAAR;AACI,aAAK,SAAL;AACI,cAAI,KAAKrC,KAAL,CAAWwC,SAAX,CAAqB,SAArB,EAAgCC,MAAhC,GAAyC,CAA7C,EAAgD;AAC5C;AACA,iBAAKzC,KAAL,CAAW0C,IAAX,CAAgB,SAAhB,EAA2BhC,KAAK,CAAC,CAAD,CAAL,CAASqB,QAAT,EAA3B,EAAgDrB,KAAK,CAAC,CAAD,CAAL,CAASqB,QAAT,EAAhD;AACH;;AACD,eAAK/B,KAAL,CAAW0C,IAAX,CAAgB,eAAhB,EAAiChC,KAAK,CAAC,CAAD,CAAtC,EAA2CA,KAAK,CAAC,CAAD,CAAhD;AACA;;AACJ,aAAK,UAAL;AAAiB;AACb,gBAAMiC,OAAO,GAAGjC,KAAK,CAAC,CAAD,CAAL,CAASqB,QAAT,EAAhB;;AACA,gBAAI,KAAK/B,KAAL,CAAWwC,SAAX,CAAqB,UAArB,EAAiCC,MAAjC,GAA0C,CAA9C,EAAiD;AAC7C,mBAAKzC,KAAL,CAAW0C,IAAX,CAAgB,UAAhB,EAA4BC,OAA5B,EAAqCjC,KAAK,CAAC,CAAD,CAAL,CAASqB,QAAT,EAArC,EAA0DrB,KAAK,CAAC,CAAD,CAAL,CAASqB,QAAT,EAA1D;AACH;;AACD,iBAAK/B,KAAL,CAAW0C,IAAX,CAAgB,gBAAhB,EAAkCC,OAAlC,EAA2CjC,KAAK,CAAC,CAAD,CAAhD,EAAqDA,KAAK,CAAC,CAAD,CAA1D;AACA;AACH;;AACD,aAAK,WAAL;AACA,aAAK,YAAL;AAAmB;AACf,gBAAMkC,OAAO,GAAGlC,KAAK,CAAC,CAAD,CAAL,CAASqB,QAAT,EAAhB;AACA,iBAAK/B,KAAL,CAAW4B,SAAX,CAAqBC,UAArB,CAAgCC,GAAhC,CAAoCO,SAApC,EAA+CO,OAA/C;AACA,gBAAM1B,IAAI,GAAG,KAAKC,YAAL,CAAkBT,KAAlB,CAAb;;AACA,gBAAI,CAACQ,IAAL,EAAW;AACP;AACH;;AACD,gBAAI,CAACc,cAAc,CAACd,IAAI,CAACE,OAAN,EAAeV,KAAK,CAAC,CAAD,CAApB,CAAnB,EAA6C;AACzC,mBAAKV,KAAL,CAAWiC,YAAX,CAAwBC,OAAxB,CAAgChB,IAAhC;AACH;;AACD;AACH;;AACD,aAAK,aAAL;AACA,aAAK,cAAL;AAAqB;AACjB,gBAAM0B,QAAO,GAAGlC,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASqB,QAAT,EAAX,GAAiC,IAAjD;;AACA,gBAAIa,QAAJ,EAAa;AACT,mBAAK5C,KAAL,CAAW4B,SAAX,CAAqBC,UAArB,CAAgCgB,GAAhC,CAAoCR,SAApC,EAA+CO,QAA/C;AACH;;AACD,gBAAME,KAAK,GAAGpC,KAAK,CAAC,CAAD,CAAnB;;AACA,gBAAIoC,KAAK,KAAK,CAAd,EAAiB;AACb,mBAAK9C,KAAL,CAAW4B,SAAX,CAAqBC,UAArB,GAAkC,KAAlC;AACH;;AACD,gBAAMX,KAAI,GAAG,KAAKC,YAAL,CAAkBT,KAAlB,CAAb;;AACA,gBAAI,CAACQ,KAAL,EAAW;AACP;AACH;;AACD,gBAAI,CAACiB,gBAAgB,CAACjB,KAAI,CAACE,OAAN,EAAe0B,KAAf,CAArB,EAA4C;AACxC,mBAAK9C,KAAL,CAAWiC,YAAX,CAAwBC,OAAxB,CAAgChB,KAAhC;AACH;;AACD;AACH;;AACD;AAAS;AACL,gBAAMA,MAAI,GAAG,KAAKC,YAAL,CAAkBT,KAAlB,CAAb;;AACA,gBAAI,CAACQ,MAAL,EAAW;AACP;AACH;;AACDA,YAAAA,MAAI,CAACE,OAAL,CAAagB,OAAb,CAAqB1B,KAArB;AACH;AAtDL;;AAwDA,aAAO,IAAP;AACH;;;uCACkBA,K,EAAO;AACtB,UAAI,KAAKV,KAAL,CAAW+C,MAAX,KAAsB,YAA1B,EAAwC;AACpC,eAAO,KAAP;AACH;;AACD,UAAMC,QAAQ,GAAGtC,KAAK,CAACqB,QAAN,EAAjB;;AACA,UAAIiB,QAAQ,KAAK,IAAjB,EAAuB;AACnB;AACA;AACA;AACA;AACA,eAAO,KAAP;AACH,OAXqB,CAYtB;AACA;AACA;;;AACA,UAAMC,GAAG,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,CAAZ;AACA,UAAMC,SAAS,GAAGH,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBH,GAAlB,CAAlB;AACA,UAAMI,QAAQ,GAAGL,QAAQ,CAACE,OAAT,CAAiB,GAAjB,CAAjB;AACA,UAAM5B,IAAI,GAAG0B,QAAQ,CAChBI,KADQ,CACFC,QAAQ,GAAG,CADT,EACY,CAAC,CADb,EAERC,KAFQ,CAEF,KAFE,EAGRC,GAHQ,CAGJ,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAqB,GAArB,CAAJ;AAAA,OAHA,CAAb;AAIA,UAAMC,WAAW,GAAGV,QAAQ,CAACI,KAAT,CAAeH,GAAG,GAAG,CAArB,EAAwBI,QAAQ,GAAG,CAAnC,EAAsCC,KAAtC,CAA4C,GAA5C,CAApB;AACA,WAAKtD,KAAL,CAAW0C,IAAX,CAAgB,SAAhB,EAA2BS,SAA3B,EAAsC7B,IAAtC,EAA4CoC,WAAW,CAAC,CAAD,CAAvD,EAA4DA,WAAW,CAAC,CAAD,CAAvE;AACA,aAAO,IAAP;AACH;;;iCACYhD,K,EAAO;AAChB,UAAMQ,IAAI,GAAG,KAAKlB,KAAL,CAAWiC,YAAX,CAAwB0B,KAAxB,EAAb;;AACA,UAAI,CAACzC,IAAL,EAAW;AACP,YAAMH,OAAO,GAAG,yEAAhB;AACA,YAAM6C,KAAK,GAAG,IAAIC,KAAJ,CAAU9C,OAAO,IAC1BL,KAAK,YAAYmD,KAAjB,0BACqBnD,KAAK,CAACK,OAD3B,2BAEqBL,KAAK,CAACqB,QAAN,EAFrB,CAD0B,CAAjB,CAAd;AAIA,aAAK/B,KAAL,CAAW0C,IAAX,CAAgB,OAAhB,EAAyBkB,KAAzB;AACA,eAAO,IAAP;AACH;;AACD,aAAO1C,IAAP;AACH;;;;;;AAEL5B,OAAO,CAACoC,OAAR,GAAkB3B,WAAlB;;AACA,SAASiC,cAAT,CAAwBZ,OAAxB,EAAiC0B,KAAjC,EAAwC;AACpC;AACA,MAAI,OAAO1B,OAAO,CAAC0C,aAAf,KAAiC,WAArC,EAAkD;AAC9C1C,IAAAA,OAAO,CAAC0C,aAAR,GAAwB1C,OAAO,CAACE,IAAR,CAAamB,MAArC;AACH;;AACD,MAAI,EAAErB,OAAO,CAAC0C,aAAV,KAA4B,CAAhC,EAAmC;AAC/B1C,IAAAA,OAAO,CAACgB,OAAR,CAAgBU,KAAhB;AACA,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;;AACD,SAASX,gBAAT,CAA0Bf,OAA1B,EAAmC0B,KAAnC,EAA0C;AACtC,MAAI,OAAO1B,OAAO,CAAC0C,aAAf,KAAiC,WAArC,EAAkD;AAC9C1C,IAAAA,OAAO,CAAC0C,aAAR,GAAwB1C,OAAO,CAACE,IAAR,CAAamB,MAArC;AACH;;AACD,MAAIrB,OAAO,CAAC0C,aAAR,KAA0B,CAA9B,EAAiC;AAC7B,QAAIhB,KAAK,KAAK,CAAd,EAAiB;AACb1B,MAAAA,OAAO,CAACgB,OAAR,CAAgBU,KAAhB;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AACD,MAAI,EAAE1B,OAAO,CAAC0C,aAAV,KAA4B,CAAhC,EAAmC;AAC/B1C,IAAAA,OAAO,CAACgB,OAAR,CAAgBU,KAAhB;AACA,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst utils_1 = require(\"./utils\");\nconst RedisParser = require(\"redis-parser\");\nconst SubscriptionSet_1 = require(\"./SubscriptionSet\");\nconst debug = utils_1.Debug(\"dataHandler\");\nclass DataHandler {\n    constructor(redis, parserOptions) {\n        this.redis = redis;\n        const parser = new RedisParser({\n            stringNumbers: parserOptions.stringNumbers,\n            returnBuffers: !parserOptions.dropBufferSupport,\n            returnError: (err) => {\n                this.returnError(err);\n            },\n            returnFatalError: (err) => {\n                this.returnFatalError(err);\n            },\n            returnReply: (reply) => {\n                this.returnReply(reply);\n            }\n        });\n        redis.stream.on(\"data\", data => {\n            parser.execute(data);\n        });\n    }\n    returnFatalError(err) {\n        err.message += \". Please report this.\";\n        this.redis.recoverFromFatalError(err, err, { offlineQueue: false });\n    }\n    returnError(err) {\n        const item = this.shiftCommand(err);\n        if (!item) {\n            return;\n        }\n        err.command = {\n            name: item.command.name,\n            args: item.command.args\n        };\n        this.redis.handleReconnection(err, item);\n    }\n    returnReply(reply) {\n        if (this.handleMonitorReply(reply)) {\n            return;\n        }\n        if (this.handleSubscriberReply(reply)) {\n            return;\n        }\n        const item = this.shiftCommand(reply);\n        if (!item) {\n            return;\n        }\n        if (command_1.default.checkFlag(\"ENTER_SUBSCRIBER_MODE\", item.command.name)) {\n            this.redis.condition.subscriber = new SubscriptionSet_1.default();\n            this.redis.condition.subscriber.add(item.command.name, reply[1].toString());\n            if (!fillSubCommand(item.command, reply[2])) {\n                this.redis.commandQueue.unshift(item);\n            }\n        }\n        else if (command_1.default.checkFlag(\"EXIT_SUBSCRIBER_MODE\", item.command.name)) {\n            if (!fillUnsubCommand(item.command, reply[2])) {\n                this.redis.commandQueue.unshift(item);\n            }\n        }\n        else {\n            item.command.resolve(reply);\n        }\n    }\n    handleSubscriberReply(reply) {\n        if (!this.redis.condition.subscriber) {\n            return false;\n        }\n        const replyType = Array.isArray(reply) ? reply[0].toString() : null;\n        debug('receive reply \"%s\" in subscriber mode', replyType);\n        switch (replyType) {\n            case \"message\":\n                if (this.redis.listeners(\"message\").length > 0) {\n                    // Check if there're listeners to avoid unnecessary `toString()`.\n                    this.redis.emit(\"message\", reply[1].toString(), reply[2].toString());\n                }\n                this.redis.emit(\"messageBuffer\", reply[1], reply[2]);\n                break;\n            case \"pmessage\": {\n                const pattern = reply[1].toString();\n                if (this.redis.listeners(\"pmessage\").length > 0) {\n                    this.redis.emit(\"pmessage\", pattern, reply[2].toString(), reply[3].toString());\n                }\n                this.redis.emit(\"pmessageBuffer\", pattern, reply[2], reply[3]);\n                break;\n            }\n            case \"subscribe\":\n            case \"psubscribe\": {\n                const channel = reply[1].toString();\n                this.redis.condition.subscriber.add(replyType, channel);\n                const item = this.shiftCommand(reply);\n                if (!item) {\n                    return;\n                }\n                if (!fillSubCommand(item.command, reply[2])) {\n                    this.redis.commandQueue.unshift(item);\n                }\n                break;\n            }\n            case \"unsubscribe\":\n            case \"punsubscribe\": {\n                const channel = reply[1] ? reply[1].toString() : null;\n                if (channel) {\n                    this.redis.condition.subscriber.del(replyType, channel);\n                }\n                const count = reply[2];\n                if (count === 0) {\n                    this.redis.condition.subscriber = false;\n                }\n                const item = this.shiftCommand(reply);\n                if (!item) {\n                    return;\n                }\n                if (!fillUnsubCommand(item.command, count)) {\n                    this.redis.commandQueue.unshift(item);\n                }\n                break;\n            }\n            default: {\n                const item = this.shiftCommand(reply);\n                if (!item) {\n                    return;\n                }\n                item.command.resolve(reply);\n            }\n        }\n        return true;\n    }\n    handleMonitorReply(reply) {\n        if (this.redis.status !== \"monitoring\") {\n            return false;\n        }\n        const replyStr = reply.toString();\n        if (replyStr === \"OK\") {\n            // Valid commands in the monitoring mode are AUTH and MONITOR,\n            // both of which always reply with 'OK'.\n            // So if we got an 'OK', we can make certain that\n            // the reply is made to AUTH & MONITO.\n            return false;\n        }\n        // Since commands sent in the monitoring mode will trigger an exception,\n        // any replies we received in the monitoring mode should consider to be\n        // realtime monitor data instead of result of commands.\n        const len = replyStr.indexOf(\" \");\n        const timestamp = replyStr.slice(0, len);\n        const argindex = replyStr.indexOf('\"');\n        const args = replyStr\n            .slice(argindex + 1, -1)\n            .split('\" \"')\n            .map(elem => elem.replace(/\\\\\"/g, '\"'));\n        const dbAndSource = replyStr.slice(len + 2, argindex - 2).split(\" \");\n        this.redis.emit(\"monitor\", timestamp, args, dbAndSource[1], dbAndSource[0]);\n        return true;\n    }\n    shiftCommand(reply) {\n        const item = this.redis.commandQueue.shift();\n        if (!item) {\n            const message = \"Command queue state error. If you can reproduce this, please report it.\";\n            const error = new Error(message +\n                (reply instanceof Error\n                    ? ` Last error: ${reply.message}`\n                    : ` Last reply: ${reply.toString()}`));\n            this.redis.emit(\"error\", error);\n            return null;\n        }\n        return item;\n    }\n}\nexports.default = DataHandler;\nfunction fillSubCommand(command, count) {\n    // TODO: use WeakMap here\n    if (typeof command.remainReplies === \"undefined\") {\n        command.remainReplies = command.args.length;\n    }\n    if (--command.remainReplies === 0) {\n        command.resolve(count);\n        return true;\n    }\n    return false;\n}\nfunction fillUnsubCommand(command, count) {\n    if (typeof command.remainReplies === \"undefined\") {\n        command.remainReplies = command.args.length;\n    }\n    if (command.remainReplies === 0) {\n        if (count === 0) {\n            command.resolve(count);\n            return true;\n        }\n        return false;\n    }\n    if (--command.remainReplies === 0) {\n        command.resolve(count);\n        return true;\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"script"}