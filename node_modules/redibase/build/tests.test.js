"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var pure_1 = require("./pure");
var blns = require('blns');
require('dotenv').config();
var sample_data = {
    people: [{ name: 'john', settings: { mode: 1, likes_spam_email: false } }, { name: 'sandy', mood: 'unknown' }],
    animals: [{ name: 'cow', age: 2 }, { name: 'sheep', age: 8.2, favorite_color: null }, { name: 'donkey', age: 1 }]
};
var redibase = index_1.connect(process.env.redis);
beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, redibase.delete('')];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
afterAll(function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, redibase.quit()];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
test('Indices are properly merged', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sample_addition, r1, r2, r3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sample_addition = { name: 'chicken', age: 3.14 };
                return [4 /*yield*/, redibase.set('', sample_data)];
            case 1:
                r1 = _a.sent();
                return [4 /*yield*/, redibase.set('animals.3', sample_addition)];
            case 2:
                r2 = _a.sent();
                return [4 /*yield*/, redibase.get('')];
            case 3:
                r3 = _a.sent();
                expect(r3.animals[3]).toEqual(sample_addition);
                return [2 /*return*/];
        }
    });
}); });
test('can set at locations that do not exist', function () { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, redibase.set('my.name.is', 'jeff')];
            case 1:
                _a.sent();
                return [4 /*yield*/, redibase.get('my')];
            case 2:
                result = _a.sent();
                expect(result).toEqual({ name: { is: 'jeff' } });
                return [2 /*return*/];
        }
    });
}); });
test('Can store and retrieve json', function () { return __awaiter(void 0, void 0, void 0, function () {
    var r1, r2, r25, r3, r4, change, r5, r6, r7, r8;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, redibase.set('', sample_data)];
            case 1:
                r1 = _a.sent();
                return [4 /*yield*/, redibase.get('people.0.name')];
            case 2:
                r2 = _a.sent();
                expect(r2).toEqual('john');
                return [4 /*yield*/, redibase.get('')];
            case 3:
                r25 = _a.sent();
                expect(r25).toEqual(sample_data);
                return [4 /*yield*/, redibase.set('animals.1.favorite_color', 'white')];
            case 4:
                r3 = _a.sent();
                return [4 /*yield*/, redibase.get('animals.1.favorite_color')];
            case 5:
                r4 = _a.sent();
                expect(r4).toEqual('white');
                change = { name: 'john' };
                return [4 /*yield*/, redibase.set('people.0', change)];
            case 6:
                r5 = _a.sent();
                return [4 /*yield*/, redibase.get('people.0')];
            case 7:
                r6 = _a.sent();
                expect(r6).toEqual(change);
                return [4 /*yield*/, redibase.delete('animals.0')];
            case 8:
                r7 = _a.sent();
                return [4 /*yield*/, redibase.get('animals.0')];
            case 9:
                r8 = _a.sent();
                expect(r8).toEqual(null);
                return [2 /*return*/];
        }
    });
}); });
test('Can store naughty strings and different types as values', function () { return __awaiter(void 0, void 0, void 0, function () {
    var store_and_retrieve, values_to_try, i;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                store_and_retrieve = function (path, value) { return __awaiter(void 0, void 0, void 0, function () {
                    var r1, r2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, redibase.set(path, value)];
                            case 1:
                                r1 = _a.sent();
                                return [4 /*yield*/, redibase.get(path)];
                            case 2:
                                r2 = _a.sent();
                                expect(r2).toEqual(value);
                                return [2 /*return*/];
                        }
                    });
                }); };
                values_to_try = __spreadArrays([
                    true, false,
                    null, undefined,
                    1, -1, 0, 1.11, Infinity, -Infinity,
                    'throw new Error("oops")',
                    '/', '.', '-', '=', '_',
                    'object', 'function', 'string'
                ], blns.slice(0, 5));
                i = 0;
                _a.label = 1;
            case 1:
                if (!(i < values_to_try.length)) return [3 /*break*/, 4];
                return [4 /*yield*/, store_and_retrieve('key1', values_to_try[i])];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3:
                i++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/];
        }
    });
}); });
test('if no key return null', function () { return __awaiter(void 0, void 0, void 0, function () {
    var delete_response, get_response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, redibase.delete('shmey1')];
            case 1:
                delete_response = _a.sent();
                return [4 /*yield*/, redibase.get('shmey1')];
            case 2:
                get_response = _a.sent();
                expect(get_response).toEqual(null);
                return [2 /*return*/];
        }
    });
}); });
test('can set on the root layer', function () { return __awaiter(void 0, void 0, void 0, function () {
    var r1, r2, r3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, redibase.set('', sample_data)];
            case 1:
                r1 = _a.sent();
                return [4 /*yield*/, redibase.set('animals', { likes_chicken: true })];
            case 2:
                r2 = _a.sent();
                return [4 /*yield*/, redibase.get('')];
            case 3:
                r3 = _a.sent();
                expect(r3).toEqual(__assign(__assign({}, sample_data), { animals: { likes_chicken: true } }));
                return [2 /*return*/];
        }
    });
}); });
test('can stringify and parse', function () {
    expect(pure_1.parse(pure_1.stringify(1))).toEqual(1);
    expect(pure_1.parse(pure_1.stringify(['test.0']))).toEqual(['test.0']);
    expect(pure_1.parse(pure_1.stringify([1, 2, 'test.0']))).toEqual([1, 2, 'test.0']);
    expect(pure_1.parse(pure_1.stringify(Infinity))).toEqual(Infinity);
    expect(pure_1.parse(pure_1.stringify(false))).toEqual(false);
    expect(pure_1.parse(pure_1.stringify(true))).toEqual(true);
    expect(pure_1.parse(pure_1.stringify(null))).toEqual(null);
    expect(pure_1.parse(pure_1.stringify('null'))).toEqual('null');
    expect(pure_1.parse(pure_1.stringify(undefined))).toEqual(undefined);
});
test('Should handle objects with funny key names', function () { return __awaiter(void 0, void 0, void 0, function () {
    var r1, r2, r3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, redibase.set('key1', { 'not.ok': 'mate' }).catch(function (err) { return err; })];
            case 1:
                r1 = _a.sent();
                return [4 /*yield*/, redibase.set('key1', { 2: 'mate' }).catch(function (err) { return err; })];
            case 2:
                r2 = _a.sent();
                return [4 /*yield*/, redibase.set('key1', { 'p_p': undefined })];
            case 3:
                r3 = _a.sent();
                expect(r1.message).toEqual('"not.ok" is not allowed');
                expect(r2.message).toEqual('"2" is not allowed');
                expect(r3).toEqual(undefined);
                return [2 /*return*/];
        }
    });
}); });
test('Should pubsub to changes', function (done) {
    (function () { return __awaiter(void 0, void 0, void 0, function () {
        var initial_weather;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, redibase.on('weather', function (new_val, old_val) { return __awaiter(void 0, void 0, void 0, function () {
                        var new_weather;
                        return __generator(this, function (_a) {
                            new_weather = new_val - 1;
                            console.log('setting weather to', new_weather);
                            if (new_val === 0) {
                                console.log('welcome to canada');
                                done();
                            }
                            else if (new_val > 0) {
                                redibase.set('weather', new_weather);
                            }
                            return [2 /*return*/];
                        });
                    }); })];
                case 1:
                    _a.sent();
                    initial_weather = 35;
                    return [4 /*yield*/, redibase.set('weather', initial_weather)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); })();
});
test.skip('delete deletes key indices right away', function (done) {
    (function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, redibase.set('', { people: { are: { here: true } } })];
                case 1:
                    _a.sent();
                    redibase.on('', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var r1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, redibase.get('people')];
                                case 1:
                                    r1 = _a.sent();
                                    expect(Object.keys(r1).length).toEqual(0);
                                    done();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    return [4 /*yield*/, redibase.delete('people.are')];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); })();
});
test.skip('delete deletes key indices right away', function (done) {
    (function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, redibase.set('', { people: ['john', 'mary', 'edward'] })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, redibase.on('', function () { return __awaiter(void 0, void 0, void 0, function () {
                            var r1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, redibase.get('')];
                                    case 1:
                                        r1 = _a.sent();
                                        expect(Object.keys(r1).length).toEqual(0);
                                        done();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, redibase.delete('')];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); })();
});
test.todo('values can become indexes eg my.name = "shmerel" then set my.name.last = "baker" and expect name to turn into an object');
test.todo('can unsubscribe');
test.todo('when subprop changes whole object is sent to on fn');
test.skip('subscribing gives nested data', function (done) {
    (function () { return __awaiter(void 0, void 0, void 0, function () {
        var test_data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    test_data = { animals: [{ name: 'cow', age: 16 }] };
                    return [4 /*yield*/, redibase.set('', test_data)];
                case 1:
                    _a.sent();
                    redibase.on('animals', function (new_value, old_value) {
                        expect(old_value).toEqual(test_data);
                        expect(new_value.animals[0]).toEqual({ name: 'sheep', age: 16 });
                    });
                    return [4 /*yield*/, redibase.set('animals.0.name', 'sheep')];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); })();
});
test.todo('can store NaN, -0, [], {}');
