"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
var pure_1 = require("./pure");
var schemas_1 = require("./schemas");
var user_1 = require("./user");
var shortid = require('shortid');
var Redis = require('ioredis');
var connect = function (connection_args) {
    var client = new Redis(connection_args);
    var subscriber = new Redis(connection_args);
    var subscriptions = {};
    subscriber.subscribe('changes');
    subscriber.on("message", function (channel, message) {
        if (channel !== 'changes')
            return;
        var changes = pure_1.parse(message);
        var todo_list = pure_1.who_cares(changes, subscriptions);
        todo_list.map(function (task) {
            task.fns.map(function (fn) { return fn(task.new, task.old); });
        });
    });
    return {
        get: function (key) {
            var error = schemas_1.key_or_path_schema.validate(key).error;
            if (error)
                return Promise.reject(error);
            return user_1.user_get(pure_1.key_to_path(key), client);
        },
        set: ramda_1.curry(function (path, json) {
            var path_error = schemas_1.key_or_path_schema.validate(path).error;
            var json_error = schemas_1.allowable_value_schema.validate(json).error;
            if (path_error)
                return Promise.reject(path_error);
            if (json_error)
                return Promise.reject(json_error);
            var user_pairs = pure_1.json_to_pairs(json);
            return user_1.user_set(pure_1.key_to_path(path), pure_1.map_keys(pure_1.concat_with_dot(pure_1.path_to_key(path)))(user_pairs), client);
        }),
        delete: function (key) { return __awaiter(void 0, void 0, void 0, function () {
            var error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = schemas_1.key_or_path_schema.validate(key).error;
                        if (error)
                            return [2 /*return*/, Promise.reject(error)];
                        return [4 /*yield*/, user_1.user_delete(pure_1.key_to_path(key), client, false)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); },
        quit: function () { return client.quit(); },
        on: function (path, cb) {
            var subscription_id = shortid.generate();
            subscriptions = ramda_1.assocPath([pure_1.path_to_key(path), subscription_id], cb)(subscriptions);
            return subscription_id;
        },
        off: function (subscription_id) {
            // subscriptions = find and remove by id
        },
        client: client
    };
};
exports.connect = connect;
