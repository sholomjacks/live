"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
var pure_1 = require("./pure");
var redis_1 = require("./redis");
var nested_get = function (path, client, _a) {
    var include_index_keys = _a.include_index_keys, max_layers = _a.max_layers;
    return __awaiter(void 0, void 0, void 0, function () {
        var key, entry_point_node_type, branch_keys, leaf_keys;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    key = pure_1.path_to_key(path);
                    return [4 /*yield*/, redis_1.redis_commands([['type', key]], client)];
                case 1:
                    entry_point_node_type = (_b.sent())[0];
                    branch_keys = entry_point_node_type === 'hash' ? [key] : [];
                    leaf_keys = entry_point_node_type === 'hash' ? [] : [key];
                    return [2 /*return*/, get_pairs(branch_keys, leaf_keys, {}, client, { include_index_keys: include_index_keys, max_layers: max_layers }, 0)];
            }
        });
    });
};
// current_layer = 1
// "" => {people: 'branch', animals: 'branch'}
// // current_layer = 2
// "people" => {0: 'branch', 1: 'branch'}
// "animals" => {0: 'branch', 1: 'branch', 2: 'branch'}
// // current_layer = 3
// 'people.0' => {name: 'leaf', age: 'leaf'}
// 'people.1' => {name: 'leaf', settings: 'branch'}
// 'animals.0'
// 'animals.1'
// 'animals.2'
// // current_layer = 4
// 'people.0.name'
var get_pairs = function (branch_keys, leaf_keys, output, client, _a, current_layer) {
    var include_index_keys = _a.include_index_keys, max_layers = _a.max_layers;
    return __awaiter(void 0, void 0, void 0, function () {
        var _b, leaf_results, branch_results, next_keys, next_branch_keys, next_leaf_keys, new_branch_output, new_leaf_output, new_output;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (current_layer === max_layers)
                        return [2 /*return*/, output];
                    return [4 /*yield*/, Promise.all([
                            leaf_keys.length > 0 ? redis_1.redis_commands([__spreadArrays(['mget'], leaf_keys)], client).then(ramda_1.unnest) : Promise.resolve([]),
                            branch_keys.length > 0 ? redis_1.redis_commands(branch_keys.map(function (bk) { return ['hgetall', bk]; }), client) : Promise.resolve([])
                        ])];
                case 1:
                    _b = _c.sent(), leaf_results = _b[0], branch_results = _b[1];
                    next_keys = function (key_type) { return ramda_1.compose(ramda_1.unnest, ramda_1.addIndex(ramda_1.map)(function (branch_key, i) {
                        var branch_indices = ramda_1.filter(ramda_1.equals(key_type), branch_results[i]);
                        return ramda_1.keys(branch_indices).map(pure_1.concat_with_dot(branch_key));
                    }))(branch_keys); };
                    next_branch_keys = next_keys('branch');
                    next_leaf_keys = next_keys('leaf');
                    new_branch_output = ramda_1.zipObj(branch_keys, branch_results);
                    new_leaf_output = ramda_1.zipObj(leaf_keys, leaf_results);
                    new_output = include_index_keys
                        ? __assign(__assign(__assign({}, output), new_leaf_output), new_branch_output) : __assign(__assign({}, output), new_leaf_output);
                    if (ramda_1.isEmpty(next_branch_keys) && ramda_1.isEmpty(next_leaf_keys))
                        return [2 /*return*/, new_output];
                    return [2 /*return*/, get_pairs(next_branch_keys, next_leaf_keys, new_output, client, { include_index_keys: include_index_keys, max_layers: max_layers }, current_layer + 1)];
            }
        });
    });
};
exports.user_get = function (path, client) { return __awaiter(void 0, void 0, void 0, function () {
    var pairs, json_obj, output;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, nested_get(path, client, { include_index_keys: false, max_layers: -1 })];
            case 1:
                pairs = _a.sent();
                json_obj = ramda_1.compose(pure_1.pairs_to_json)(pairs);
                output = ramda_1.equals(path, [""]) ? json_obj : pure_1.strict_path_or(undefined, path, json_obj);
                return [2 /*return*/, output];
        }
    });
}); };
exports.user_delete = function (path, client, quiet) { return __awaiter(void 0, void 0, void 0, function () {
    var pairs, todo, one_layer_up, last_el, key_to_update;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, nested_get(path, client, { include_index_keys: true, max_layers: -1 })];
            case 1:
                pairs = _a.sent();
                todo = [__spreadArrays(['del'], ramda_1.keys(pairs))];
                if (!!ramda_1.equals(path, [""])) return [3 /*break*/, 3];
                return [4 /*yield*/, nested_get(ramda_1.slice(0, -1)(path), client, { include_index_keys: true, max_layers: 1 })
                    // remove the one key from the index
                ];
            case 2:
                one_layer_up = _a.sent();
                // remove the one key from the index
                if (!ramda_1.isNil(one_layer_up)) {
                    last_el = ramda_1.last(path);
                    key_to_update = pure_1.path_to_key(ramda_1.slice(0, -1)(path));
                    todo.push(['hdel', key_to_update, last_el]);
                }
                _a.label = 3;
            case 3: return [4 /*yield*/, redis_1.redis_commands(todo, client)];
            case 4:
                _a.sent();
                if (quiet)
                    return [2 /*return*/, pairs];
                client.publish('changes', pure_1.stringify({ old: pairs, new: ramda_1.reduce(function (acc, val) {
                        var _a;
                        return (__assign(__assign({}, acc), (_a = {}, _a[val] = null, _a)));
                    }, {}, ramda_1.keys(pairs)) }));
                return [2 /*return*/, pairs];
        }
    });
}); };
exports.user_set = function (path, given_child_pairs, client) { return __awaiter(void 0, void 0, void 0, function () {
    var old_pairs, add_children_command, add_to_index_commands;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, exports.user_delete(path, client, true)];
            case 1:
                old_pairs = _a.sent();
                add_children_command = ['mset', given_child_pairs];
                add_to_index_commands = pure_1.get_required_indexes(ramda_1.keys(given_child_pairs));
                return [4 /*yield*/, redis_1.redis_commands(__spreadArrays([add_children_command], add_to_index_commands), client)];
            case 2:
                _a.sent();
                client.publish('changes', pure_1.stringify({ old: old_pairs, new: given_child_pairs }));
                return [2 /*return*/];
        }
    });
}); };
